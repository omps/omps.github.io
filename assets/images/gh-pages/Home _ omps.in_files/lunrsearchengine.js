var documents=[{"id":0,"url":"https://www.omps.in/404.html","title":"404","body":"404 Page does not exist!Please use the search bar at the top or visit our homepage! "},{"id":1,"url":"https://www.omps.in/about","title":"I am Om.","body":"This is my static blog page made using Jekyll. The Theme in use is Mediumish Jekyll Theme by WowThemes. net Reach MeYou can reach me at Mediumish . Buy me a coffee Documentation"},{"id":2,"url":"https://www.omps.in/categories","title":"Categories","body":""},{"id":3,"url":"https://www.omps.in/","title":"Home","body":"      Featured:                                                                                                                                                                                                                                                                             setting up puppet on google cloud.                               :               File Locations::                                                                                                                                                                       omps                                26 Mar 2017                                                                                                                                                                                                                                                                                                                              Google Cloud Platform                              :               Google cloud platform. :                                                                                                                                                                       omps                                23 Mar 2017                                                                                                                                                                                                                                        All Stories:                                                             strength training              :       Following my training plan to run 8 KM provided by endomondo, Managed to keep a pace of 08:00 min/km. Started late around 08:30AM and pushed myself to 10:00AM. This was. . . :                               06 Mar 2019        &lt;/span&gt;                                                                                    Ansible Quoting              :       When quoting is necessary in Ansible. Quoting in Ansible is not as usual quoting works. Its a little complex at times we may need to use quotes under quotes to. . . :                               10 Feb 2019        &lt;/span&gt;                                                                                    Goals 2019!!              :       Goals for 2019Targets I am planning to achieve in 2019. :                               22 Dec 2018        &lt;/span&gt;                                                                                    2018 Excercise              :       Ah! one year of practice, lethargy, loose focus, and weak determination I finally deciding to pursue what I always wanted to do. Loose KGs. This had been humongous task, I. . . :                               21 Dec 2018        &lt;/span&gt;                                                                                    arch linux setup              :       Found a old compaq laptop from previous life, this may be 8/10 years old. The laptop came with a working motherboard and a failed battery. Everything worked fine except the. . . :                               09 Nov 2017        &lt;/span&gt;                                                                                    How I Rest From Work              :       Fam locavore snackwave bushwick +1 sartorial. Selfies portland knausgaard synth. Pop-up art party marfa deep v pitchfork subway tile 3 wolf moon. Ennui pinterest tumblr yr, adaptogen succulents copper mug. . . :                               12 Sep 2017        &lt;/span&gt;                                       &laquo; Prev       1        2        3        4        5        6      Next &raquo; "},{"id":4,"url":"https://www.omps.in/page2/","title":"Home","body":"{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"},{"id":5,"url":"https://www.omps.in/page3/","title":"Home","body":"{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"},{"id":6,"url":"https://www.omps.in/page4/","title":"Home","body":"{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"},{"id":7,"url":"https://www.omps.in/page5/","title":"Home","body":"{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"},{"id":8,"url":"https://www.omps.in/page6/","title":"Home","body":"{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"},{"id":9,"url":"https://www.omps.in/robots.txt","title":"","body":"      Sitemap: {{ “sitemap. xml”   absolute_url }}   "},{"id":10,"url":"https://www.omps.in/importance-of-strength-training/","title":"strength training","body":"2019/03/06 - Following my training plan to run 8 KM provided by endomondo, Managed to keep a pace of 08:00 min/km. Started late around 08:30AM and pushed myself to 10:00AM. This was not a great workout, but managed to keep up the pace. This is my training plan ![Endomondo Training Plan](“img/mytrainingplan. png”) "},{"id":11,"url":"https://www.omps.in/ansible-quoting/","title":"Ansible Quoting","body":"2019/02/10 - When quoting is necessary in Ansible. Quoting in Ansible is not as usual quoting works. Its a little complex at times we may need to use quotes under quotes to make things work. For example, if refrencing a variable right after specifying the module, the YAML parser will misinterpret the variable refrence as the beginning of an in-line dictonary. As seen in the below example. 12  - name: performing a task	 command: {{ my_command }} -a fooAnsible here will read this YAML and try to parse the first part of  {{ my_command }}  -a foo as a dictonary instead of a string, and thus returns an error. For handle this, the arguments must be quoted. 12  - name: performing a task	 command:  {{ my_command }} -a foo A similar problem comes with inline colons. As an example 123  - name: debug something	 debug: 	  msg:  Debug message: some message  	This colon is enough to confuse the YAML parser and give error. To fix this, we need to quote the entire argument string. But quoting the entire string will not also solve this problem and need to be handeled seperately 12  - name: debug something	 debug:  msg: Debug message: some message.  	now this message will give you an error with an interesting way to fix this. This one looks easy to fix.  It seems that there is a value started with a quote, and the YAML parser is expecting to see the line ended with the same kind of quote.  For instance: 1when:  ok  in result. stdoutCould be written as: when: ‘“ok” in result. stdout’ Or equivalently: when: “‘ok’ in result. stdout” We could be wrong, but this one looks like it might be an issue with unbalanced quotes.  If starting a value with a quote, make sure theline ends with the same set of quotes.  For instance this arbitrary example: 1foo:  bad   wolf Could be written as: 1234567foo: ' bad   wolf 'TASK [show debug message] *******************************************************************************************************************ok: [testserver] =&gt; {	 msg :  Debug message: some message.  }and this is how to quote strings in YAML. "},{"id":12,"url":"https://www.omps.in/goals-2019/","title":"Goals 2019!!","body":"2018/12/22 - Goals for 2019: Targets I am planning to achieve in 2019. :  2019-01-13: Kharghar 10 KM Run.  2019-02-17: Tiradhatu 10KM Marathon complete in 1 hour.  2018-01-20: Tata Mumbai 10KM Marathon complete in 1hr 20mins.  July 2019: Complete one half marathon.  Indian Navy Half Marathon.  Register for Tata Mumbai Full Marathon for 2020.  Swim for 4 Kms in one hour.  Participate in BRMs.  Cycle to work: from Palava to Powai 3 days a week.  Cycte to work: from Palava to Ghansoli 2 days a week.  Strngth training twice a week.  Complete the Raffa challenege of 8 days starting from 25th December. January:  Kharghar 10KM Challenege Ride to Shirdi from Palava. "},{"id":13,"url":"https://www.omps.in/2018-excercise/","title":"2018 Excercise","body":"2018/12/21 - Ah! one year of practice, lethargy, loose focus, and weak determinationI finally deciding to pursue what I always wanted to do. Loose KGs. This had been humongous task, I was off and on from several things, started practicing with yoga in the early 2017, and after 3 months of 3 days week yoga sessions and speding around 3000/- INR for yoga classes, I forgot to continue it further after the yoga classes and was back on to the track of doing nothing. Then, in the summers of April, started again with another passion of cycling, I started with my old Hero Hawk fixed gear bike, which soon started to disappoint me then encourgae me to cycle. I never thought I would be able to cycle back again, It again went back to garage not to be used again somehow I came in touch with Strava during that time, which has inspired me a lot by showing my progress daily as I make some this once again inspired me to pursue cycling again, In the meanwhile I was off and on with Yoga doing some days skipping some days. With Strava I started again cycling with my same Hero Hawk Bike, joined the local cycling group, encouraged people for group rides some times I didn't show up, sometimes no one showed up and eventually I made strava my friend, during that time I learnt a lot on cycling thorogh blog posts, you tube channels and from the cycling group seniors and realised that cycling is though a good excercise but it does need to have proper tyres, frames, saddles, gearing system for Middle Aged beginners and most importantly the bike fit, how it can help you challenege yourself and how it can practically discourage you again to cycle. But once the lesson learnt I am back on track. 2017 had been a tremendous year, I cycled a lot, I went on lot of group rides and participated in some races too(though never really planned to win any and just to get the feel) the same cycling fever gave me another hunch to participate in Marathons, My father already a marathon runner and has participated in many such events gave me enough inspiration to start particiating in Marathons, so welcome 2018, I registered my self for quite some Marathons still I was very slow, cycling did gave me stamina but not for running and I still weigh around 97 KGs so after all the hearsay about injuries in running and shin pain and all I slowed down with my Marathons and mostly ended up walking in those runs, further decided not to participate in any til my body becomes more flexible, then all this time I slowly continued with Surya Namaskars and Warm up in the morning, tried cycle to work on some days during rainy and summer seasons which too discouraged me a lot because of all the heat and visiblity in rainy season, basically the progress was very slow, I was an log distance rider and enjoyed riding also but I was not where getting closer to loosing any weight or building strenght because of this regular on and off. This all was not disappointing at all, during this period I had too health checkups done which was way better than last year with happily reducing to within the Cholestorol Levels limit, so all in all It was going smoothly and I was very happy with the slow progress I was making. oh! and I forgot to tell you this is all I was doing without any significant diet change. So the chips and the smosas and vada pavs and Mc Donalds Burger and Pizzas were still doing their rounds, with weekend evening night parties with Friends and drinks. It was all so happy to give it up with my Cholestrol Levels down, with increased stamina, etc. Then came the time during 2018 Navratri, I took 9 days fast, I had gained some body weight and was not really looking forward to continue the same pattern, so pledged durning Navratri that I will eat less and cycle more, almost had planned to do cycle to work starting with every 3 days week and making it to 5 days week. Around the same time, I came across a challenge has started to loose weight, without thinking twice I made my mind to participate in this challenge, a team of 6 joined the challenge. I did my evalutation, Body Fat 42%, body Fat to reduce 42% :PIts time to excercise and reduce the body fat %, I was excercising but with this I got more focus, started excercising regularly, daily yoga, cycling and walking, also started treadmill walks and runsTook gym membership for 3 months, as got advise that strength training is eqaully important. November came, so the festivals and all the sweets and those puri and chole and mutter pulaoin Mid November did another evaluation body fat 42% weight loss 1KG. was very happy with the weight loss, that finally I am achieving weight loss, then someone told, this weight loss is really bad, because you are not loosing your fat, but your muscle mass which helps burn fat, so if you loose muscles you will loose weight but its of not use. You will look the same. &gt;p&gt;Advices flew in, so it was the protien which screwed up, Its difficult for vegeterians to get regular dose of protein, we being a vegeterian family difficult to get enough protein in diet though I eat eggs but because of all this fesitve season had to avoid on the eggs, but now its serious had to go on egg and egg only, so started religuously 4 egg whites daily regardless of gym or no gym. with regular gym and enough protein, i started to run as well and started to run almost around 30 mins regularly on my cardio days. almost around with 2 month of rigorous practice, gym, cycling and running I finally managed to loose around 4 Kgs weight and 1. 5% body fat. Still the diet is same but have significantly dropped fried foods, junk food, aereated drinks and sugar. Live only on black coffee, fruits, homemade roti sabzi for lunch and milk for dinnerlets see the progress in Jan. The Final Frontier:                   "},{"id":14,"url":"https://www.omps.in/important-archlinux-installation/","title":"arch linux setup","body":"2017/11/09 - Found a old compaq laptop from previous life, this may be 8/10 years old. The laptop came with a working motherboard and a failed battery. Everything worked fine except the OS is not getting detected and the harddisk was with corrupt sectors. I happen to swap my Thinkpad 500GB IDE harddisk with an 120 GB SSD one. All the day tried to get multiple oses installing on to the USB drive and tried to boot the laptop with those multiple oses. I choose to move ahead with damnsmall linux. After making a bootable ISO from the downloaded ISO image the particular version disappointed me by not only booting. Then went with puppylinux, issue is something similar, after searching for files it ended up in the pause state. Sorry, i missed to take the screenshot but yeah that happened for real. finally frustated tried my luck with Arch Linux and I must say it just booted up as if this is as normal as anything. THough I was surpriesed I had work to finish which is to make this OS work again. After going ahead and booting with arch ISO i figured out that the laptop has got a bad disk. Well all this RND took significant time of my day. Finally realized I had an old working arch installed disk which was previously taken from my THiinkpad and kept in store. Decided to make use of it. After another 30 minutes and and some hardware time finally got my disk detcted with this laptop. After the disk is detected the OS decided not to boot up. since it was arch I was pretty sure I will be getting all the issues fixed. Started to boot arch in the failsafe mode. the Failsafe mode worked pretty fine. Now this boosted my confidence I was sure the system is going to work, though this is going to take a little while. But somehow got the system booted. The issue with normal boot was the initramfs was not able to detect my disk or partitions and was failing with “unknown root disk error”. After doing extensive search on google from my mobile, i did figured it out that I may need to reinstall the grub re-create its configuration file. so here i did it. 1# grub-install --target=i386-pc /dev/sdxdo a grub mkconfig and generate a grub. cfg: 1# grub-mkconfig -o /boot/grub/grub. cfgSo even after doing all this the erros persisted. It seems I need to regenrate the initramfs By using the default configration as per the /etc/mkinitcpio. conf regenerated the initramfs. 1# mkinitcpio -g /boot/linux-custom2. img -k 3. 3. 0-ARCHIncase if you happen to change or use an alternate configuration make a copy to the configuration file and use. 1# mkinitcpio -c /etc/mkinitcpio-custom. conf -g /boot/linux-custom. imgWell made some changes in grub. cfg file to use this new initramfs. rebooted the system and voilla all worked well in the default mode. Now comes another challenging task. Being this a dell laptop it has some propriteory wireless lan card which is not being loaded at the boot time. Arch Linux wiki suggested to install some packages, since the device is not having any network I had to think how to do it. I thought downloading on one machine and copying to another but that would be a tedious task. I need to go everytime back to download dependecies and come back and copy and install in this laptop. A simpler approach is to connect over the LAN. sadly i did not have a lan cable available with me, now this again left me in vain, after so much effort setting everything up now feeling some solution to get the wireless drivers installed and make internet work. So finally after puutting a lot of thought did the most usual thing connected my android device on the Laptop and did a USB tethering. Steps are indeed simple, but writing again for my notes.  Connect your android device with your laptop USB port.  Enable USB tethering on the device.  Do a IP link show to identify the new device.  The name of the device should be en0sp2xxxx run a dhcpcd to configure and bring it up with DHCP. A good documentation for same can be found here https://wiki. archlinux. org/index. php/android_tethering Once the tethring is done and google is responding to my ping requests. the next thing to do was configure wireless networking and install the right drivers. Documetaions for my broadcomm wireless device. https://wiki. archlinux. org/index. php/broadcom_wireless short way is  Identify the drivers  1$ lspci -vnn -d 14e4:       install the drivers. yaourt broadcom-wl     Reboot the system     Do a ip link show to see the newly discovered wireless device.   run wifi-menu and connect to internet. (requires sudo)Note: I am writing this blog from the same compaq notebook. "},{"id":15,"url":"https://www.omps.in/how-i-rest-from-work/","title":"How I Rest From Work","body":"2017/09/12 - Fam locavore snackwave bushwick +1 sartorial. Selfies portland knausgaard synth. Pop-up art party marfa deep v pitchfork subway tile 3 wolf moon. Ennui pinterest tumblr yr, adaptogen succulents copper mug twee. Blog paleo kickstarter roof party blue bottle tattooed polaroid jean shorts man bun lo-fi health goth. Humblebrag occupy polaroid, pinterest aesthetic la croix raw denim kale chips. 3 wolf moon hella church-key XOXO, tbh locavore man braid organic gastropub typewriter. Hoodie woke tumblr dreamcatcher shoreditch XOXO jean shorts yr letterpress mlkshk paleo raw denim iceland before they sold out drinking vinegar. Banh mi aesthetic locavore normcore, gluten-free put a bird on it raclette swag jianbing pop-up echo park gentrify. Stumptown brooklyn godard tumeric ethical. Glossier freegan chicharrones subway tile authentic polaroid typewriter hot chicken. Thundercats small batch heirloom meggings. Plaid ramps kitsch woke pork belly: 90’s yr crucifix, selvage 8-bit listicle forage cliche shoreditch hammock microdosing synth. Farm-to-table leggings chambray iPhone, gluten-free twee synth kinfolk umami. Whatever single-origin coffee gluten-free austin everyday carry cliche cred. Plaid ramps kitsch woke pork belly organic. Trust fund whatever coloring book kombucha brooklyn. Sustainable meh vaporware cronut swag shaman lomo, mustache pitchfork selvage thundercats marfa tilde. Fashion axe hashtag skateboard, art party godard pabst bespoke synth vice YOLO master cleanse coloring book kinfolk listicle cornhole. Try-hard mixtape umami fanny pack man bun gastropub franzen tbh. Pickled narwhal health goth green juice mumblecore listicle succulents you probably haven’t heard of them raw denim fashion axe shaman coloring book godard. Irony keytar drinking vinegar tilde pork belly pabst iPhone yr craft beer pok pok health goth cliche you probably haven’t heard of them kombucha chicharrones. Direct trade hella roof party chia. Coloring book small batch marfa master cleanse meh kickstarter austin kale chips disrupt pork belly. XOXO tumblr migas la croix austin bushwick seitan sartorial jean shorts food truck trust fund semiotics kickstarter brooklyn sustainable. Umami knausgaard mixtape marfa. Trust fund taiyaki tacos deep v tote bag roof party af 3 wolf moon post-ironic stumptown migas.  Selfies sriracha taiyaki woke squid synth intelligentsia PBR&amp;B ethical kickstarter art party neutra biodiesel scenester. Health goth kogi VHS fashion axe glossier disrupt, vegan quinoa. Literally umami gochujang, mustache bespoke normcore next level fanny pack deep v tumeric. Shaman vegan affogato chambray. Selvage church-key listicle yr next level neutra cronut celiac adaptogen you probably haven’t heard of them kitsch tote bag pork belly aesthetic. Succulents wolf stumptown art party poutine. Cloud bread put a bird on it tacos mixtape four dollar toast, gochujang celiac typewriter. Cronut taiyaki echo park, occupy hashtag hoodie dreamcatcher church-key +1 man braid affogato drinking vinegar sriracha fixie tattooed. Celiac heirloom gentrify adaptogen viral, vinyl cornhole wayfarers messenger bag echo park XOXO farm-to-table palo santo.  Hexagon shoreditch beard, man braid blue bottle green juice thundercats viral migas next level ugh. Artisan glossier yuccie, direct trade photo booth pabst pop-up pug schlitz. Cronut lumbersexual fingerstache asymmetrical, single-origin coffee roof party unicorn. Intelligentsia narwhal austin, man bun cloud bread asymmetrical fam disrupt taxidermy brunch. Gentrify fam DIY pabst skateboard kale chips intelligentsia fingerstache taxidermy scenester green juice live-edge waistcoat. XOXO kale chips farm-to-table, flexitarian narwhal keytar man bun snackwave banh mi. Semiotics pickled taiyaki cliche cold-pressed. Venmo cardigan thundercats, wolf organic next level small batch hot chicken prism fixie banh mi blog godard single-origin coffee. Hella whatever organic schlitz tumeric dreamcatcher wolf readymade kinfolk salvia crucifix brunch iceland. Literally meditation four loko trust fund. Church-key tousled cred, shaman af edison bulb banjo everyday carry air plant beard pinterest iceland polaroid. Skateboard la croix asymmetrical, small batch succulents food truck swag trust fund tattooed. Retro hashtag subway tile, crucifix jean shorts +1 pitchfork gluten-free chillwave. Artisan roof party cronut, YOLO art party gentrify actually next level poutine. Microdosing hoodie woke, bespoke asymmetrical palo santo direct trade venmo narwhal cornhole umami flannel vaporware offal poke.  Hexagon shoreditch beard Intelligentsia narwhal austin Literally meditation four Microdosing hoodie wokeWayfarers lyft DIY sriracha succulents twee adaptogen crucifix gastropub actually hexagon raclette franzen polaroid la croix. Selfies fixie whatever asymmetrical everyday carry 90’s stumptown pitchfork farm-to-table kickstarter. Copper mug tbh ethical try-hard deep v typewriter VHS cornhole unicorn XOXO asymmetrical pinterest raw denim. Skateboard small batch man bun polaroid neutra. Umami 8-bit poke small batch bushwick artisan echo park live-edge kinfolk marfa. Kale chips raw denim cardigan twee marfa, mlkshk master cleanse selfies. Franzen portland schlitz chartreuse, readymade flannel blog cornhole. Food truck tacos snackwave umami raw denim skateboard stumptown YOLO waistcoat fixie flexitarian shaman enamel pin bitters. Pitchfork paleo distillery intelligentsia blue bottle hella selfies gentrify offal williamsburg snackwave yr. Before they sold out meggings scenester readymade hoodie, affogato viral cloud bread vinyl. Thundercats man bun sriracha, neutra swag knausgaard jean shorts. Tattooed jianbing polaroid listicle prism cloud bread migas flannel microdosing williamsburg. Echo park try-hard irony tbh vegan pok pok. Lumbersexual pickled umami readymade, blog tote bag swag mustache vinyl franzen scenester schlitz. Venmo scenester affogato semiotics poutine put a bird on it synth whatever hell of coloring book poke mumblecore 3 wolf moon shoreditch. Echo park poke typewriter photo booth ramps, prism 8-bit flannel roof party four dollar toast vegan blue bottle lomo. Vexillologist PBR&amp;B post-ironic wolf artisan semiotics craft beer selfies. Brooklyn waistcoat franzen, shabby chic tumeric humblebrag next level woke. Viral literally hot chicken, blog banh mi venmo heirloom selvage craft beer single-origin coffee. Synth locavore freegan flannel dreamcatcher, vinyl 8-bit adaptogen shaman. Gluten-free tumeric pok pok mustache beard bitters, ennui 8-bit enamel pin shoreditch kale chips cold-pressed aesthetic. Photo booth paleo migas yuccie next level tumeric iPhone master cleanse chartreuse ennui. "},{"id":16,"url":"https://www.omps.in/the-best-organizer-software/","title":"The Best Organizer Software","body":"2017/09/11 - Church-key blog messenger bag, selfies umami man braid mlkshk. Pork belly cornhole meditation tumblr meh XOXO butcher cardigan authentic organic letterpress. Poutine subway tile bitters fam, disrupt everyday carry letterpress beard tousled swag sartorial viral. Retro af 3 wolf moon heirloom, pork belly man bun DIY chillwave. Shoreditch ennui stumptown, photo booth tumeric PBR&amp;B direct trade coloring book marfa taxidermy. Gentrify brunch typewriter woke freegan. Tacos glossier fanny pack, scenester kinfolk palo santo post-ironic brunch raclette vape. Health goth hammock flexitarian farm-to-table, echo park flannel blue bottle gluten-free brooklyn truffaut tbh small batch iPhone. DIY PBR&amp;B four dollar toast tofu woke migas retro shoreditch disrupt yuccie YOLO vinyl man bun. Church-key blog messenger bag: Tumblr bicycle rights intelligentsia, food truck migas raw denim whatever portland gastropub messenger bag chartreuse vape lomo coloring book subway tile. Yr pabst meggings tattooed four dollar toast. Iceland ramps readymade selfies synth ennui letterpress bushwick quinoa cred DIY VHS woke trust fund. Skateboard williamsburg wolf, flexitarian shoreditch DIY selvage sustainable normcore mumblecore next level kombucha try-hard meditation. Gentrify plaid microdosing, master cleanse ugh crucifix pop-up. Wolf bushwick street art tumeric. Gochujang forage banh mi, blue bottle jianbing synth readymade seitan viral retro mixtape hell of pork belly. Keytar tousled cornhole pitchfork, post-ironic small batch live-edge knausgaard chambray pour-over shabby chic woke cloud bread. Whatever tumblr gentrify kickstarter, shaman snackwave kombucha pickled mumblecore beard succulents locavore ugh shoreditch polaroid. Wayfarers crucifix tattooed twee. Yr listicle crucifix fingerstache farm-to-table. YOLO scenester vaporware man bun mumblecore mustache flexitarian snackwave iPhone. Hella lo-fi banjo, disrupt tofu prism raclette. Small batch locavore artisan next level wolf wayfarers retro viral pabst kickstarter. Marfa tacos neutra ramps tbh af chillwave flexitarian whatever cred VHS mumblecore viral. Hell of retro vegan chambray tacos VHS four dollar toast tote bag. Activated charcoal semiotics typewriter disrupt brunch selfies, yr hashtag selvage retro PBR&amp;B bitters. Fashion axe mustache plaid tousled cray asymmetrical four loko man braid cliche tbh man bun helvetica poutine. Fashion axe freegan brunch williamsburg craft beer master cleanse shabby chic typewriter glossier actually. Plaid tumblr hexagon neutra slow-carb mumblecore. Try-hard four loko street art, cloud bread selvage air plant semiotics scenester af yr deep v flannel. Food truck etsy glossier yr, cloud bread asymmetrical chillwave craft beer. Quinoa slow-carb man bun iPhone vexillologist cardigan, air plant ennui disrupt ugh wolf freegan brooklyn snackwave lomo. Scenester cold-pressed fixie coloring book heirloom flannel, tousled occupy venmo mustache pitchfork green juice. VHS neutra 8-bit roof party. Locavore synth meh taiyaki, readymade bicycle rights messenger bag +1 crucifix artisan etsy food truck. Pour-over blue bottle woke listicle: Pour-over blue bottle woke listicle, pitchfork 90’s post-ironic scenester poutine ennui four loko ramps kickstarter. Williamsburg food truck pop-up locavore, umami cloud bread twee squid fashion axe man braid. Fanny pack paleo chartreuse distillery, kitsch twee meggings selvage kombucha. Keffiyeh actually prism listicle. Taxidermy authentic iPhone migas vegan copper mug. Post-ironic raw denim taiyaki cred hot chicken freegan, intelligentsia poke art party church-key PBR&amp;B crucifix. Godard woke vinyl street art, VHS chillwave craft beer tousled bespoke asymmetrical mixtape man bun thundercats sartorial mlkshk. Meggings heirloom XOXO gentrify try-hard stumptown. Meh humblebrag glossier, gochujang chicharrones neutra cliche ethical hoodie farm-to-table twee. Messenger bag offal pug bespoke, put a bird on it tote bag literally. Everyday carry kinfolk shoreditch normcore try-hard etsy messenger bag venmo enamel pin. Try-hard fanny pack thundercats farm-to-table retro twee. Godard photo booth tofu 90’s. Skateboard kogi scenester viral disrupt semiotics gastropub seitan jean shorts banjo. Humblebrag knausgaard waistcoat mixtape. Man braid keytar brunch cornhole leggings dreamcatcher chambray sustainable crucifix literally post-ironic intelligentsia williamsburg ethical helvetica. Fixie disrupt PBR&amp;B, unicorn food truck 8-bit leggings actually man bun twee mlkshk viral. Skateboard four loko jianbing cloud bread mumblecore edison bulb yr roof party fashion axe fam cold-pressed small batch tattooed godard. Bushwick yuccie thundercats schlitz listicle skateboard quinoa. Gentrify hot chicken pop-up keytar master cleanse pork belly. Irony pitchfork la croix neutra freegan. Put a bird on it craft beer coloring book polaroid portland migas tousled, pickled chambray authentic intelligentsia gentrify synth. Letterpress tumblr wolf normcore selvage. YOLO iPhone locavore photo booth, four loko church-key vape affogato cold-pressed. Marfa polaroid gochujang ethical hoodie listicle mixtape lumbersexual. "},{"id":17,"url":"https://www.omps.in/how-to-start-programming/","title":"How To Start Programming","body":"2017/09/11 - Post-ironic jean shorts bushwick umami, synth beard austin hell of meh kitsch distillery sustainable plaid bitters. Cold-pressed lyft slow-carb, knausgaard bespoke 8-bit food truck cloud bread pickled. Taiyaki bitters trust fund heirloom craft beer single-origin coffee. Readymade fam vape blue bottle cold-pressed, flannel polaroid. Aesthetic four dollar toast semiotics af bicycle rights. Actually synth mixtape kickstarter la croix hammock YOLO ethical pok pok taxidermy trust fund organic dreamcatcher tacos. Franzen four loko man braid letterpress umami offal. Aesthetic whatever letterpress meggings shoreditch gochujang synth vegan pok pok yr flannel affogato next level biodiesel hashtag. Banjo vaporware lyft unicorn tumblr. Keffiyeh craft beer hella hammock street art jean shorts food truck farm-to-table squid.  Tattooed pour-over taiyaki woke, skateboard subway tile PBR&amp;B etsy distillery street art pok pok wolf 8-bit. Vegan bicycle rights schlitz subway tile unicorn taiyaki. Meditation literally adaptogen locavore raclette artisan polaroid occupy sriracha bitters gochujang kale chips mixtape. Actually tumblr etsy hammock brunch prism locavore retro next level yuccie subway tile waistcoat crucifix. Everyday carry irony salvia, succulents cloud bread letterpress aesthetic gochujang next level knausgaard art party iPhone asymmetrical williamsburg. Iceland slow-carb knausgaard narwhal skateboard kitsch fashion axe. Man bun celiac street art, cliche PBR&amp;B lomo blue bottle beard bitters. Mlkshk occupy offal dreamcatcher. Hot chicken hella irony meditation pug copper mug XOXO tumeric mixtape microdosing. Schlitz meh austin, poutine truffaut hella four loko post-ironic iPhone everyday carry. Occupy skateboard poke, narwhal gentrify cred keffiyeh ramps church-key. Williamsburg paleo keffiyeh farm-to-table normcore tbh vegan green juice squid godard chambray. DIY organic letterpress, venmo salvia crucifix gluten-free. Yr celiac tbh selfies activated charcoal. Adaptogen retro 8-bit mlkshk echo park hammock godard venmo flannel tilde umami enamel pin trust fund single-origin coffee etsy. Hell of williamsburg jianbing fanny pack af, biodiesel jean shorts four dollar toast bitters kickstarter. DIY edison bulb keffiyeh raclette. Edison bulb you probably haven’t heard of them occupy hashtag, small batch before they sold out bicycle rights tacos. IPhone selfies banh mi sartorial, typewriter seitan plaid. Fanny pack williamsburg gentrify plaid hoodie. Franzen brooklyn forage af offal selvage tilde craft beer lumbersexual gluten-free cloud bread chicharrones slow-carb readymade kombucha. Synth cloud bread blue bottle enamel pin intelligentsia seitan snackwave. Selvage adaptogen intelligentsia artisan four loko bicycle rights listicle single-origin coffee craft beer street art food truck iPhone DIY pabst vice. Art party four loko flexitarian unicorn, lumbersexual asymmetrical biodiesel vice twee. Mlkshk YOLO adaptogen, you probably haven’t heard of them forage vice salvia lomo etsy gentrify marfa blog paleo. Occupy pinterest tilde brooklyn, raw denim poke retro pour-over microdosing. Skateboard keytar actually disrupt taiyaki, synth biodiesel. Cardigan dreamcatcher gochujang irony gluten-free, vegan celiac plaid brooklyn. Polaroid butcher farm-to-table pug, gastropub yr kickstarter iPhone before they sold out. Marfa cornhole migas hashtag flannel fashion axe deep v kogi. Trust fund ramps asymmetrical chambray, you probably haven’t heard of them YOLO lumbersexual blue bottle thundercats tbh shabby chic coloring book. Kickstarter ugh try-hard four dollar toast master cleanse. Semiotics bespoke art party twee roof party cardigan. Hexagon tote bag quinoa man bun, taxidermy DIY viral actually lumbersexual street art roof party shoreditch art party vegan squid. Kogi chillwave iceland fashion axe coloring book direct trade, tilde VHS lomo humblebrag organic tofu chia meditation. Hella keytar shabby chic 90’s taxidermy tacos marfa. Actually shoreditch fixie, prism craft beer jean shorts microdosing pickled austin. Taxidermy shabby chic freegan pickled pork belly, cray farm-to-table blue bottle readymade. 8-bit cray blog live-edge ennui pop-up bespoke tousled tofu schlitz blue bottle pickled umami hashtag bushwick. Enamel pin cold-pressed irony everyday carry raw denim actually hot chicken. "},{"id":18,"url":"https://www.omps.in/10-tips-to-improve-your-workflow/","title":"10 Tips To Improve Your Workflow","body":"2017/09/11 - Asymmetrical portland enamel pin af heirloom ramps authentic thundercats. Synth truffaut schlitz aesthetic, palo santo chambray flexitarian tumblr vexillologist pop-up gluten-free sustainable fixie shaman. Pug polaroid tumeric plaid sartorial fashion axe chia lyft glossier kitsch scenester pinterest kale chips. Blog etsy umami fashion axe shoreditch. Prism chambray heirloom, drinking vinegar portland paleo slow-carb. Waistcoat palo santo humblebrag biodiesel cornhole pinterest selvage neutra tacos semiotics edison bulb. Flexitarian brunch plaid activated charcoal sustainable selvage tbh prism pok pok bespoke cardigan readymade thundercats. Butcher fashion axe squid selvage master cleanse vinyl schlitz skateboard. Lomo shaman man bun keffiyeh asymmetrical listicle. Kickstarter trust fund fanny pack post-ironic wayfarers swag kitsch. Shaman pug kale chips meh squid. Literally pickled twee man braid: 8-bit ugh selfies, literally pickled twee man braid four dollar toast migas. Slow-carb mustache meggings pok pok. Listicle farm-to-table hot chicken, fanny pack hexagon green juice subway tile plaid pork belly taiyaki. Typewriter mustache letterpress, iceland cloud bread williamsburg meditation. Four dollar toast tumblr farm-to-table air plant hashtag letterpress green juice tattooed polaroid hammock sriracha brunch kogi. Thundercats swag pop-up vaporware irony selvage PBR&amp;B 3 wolf moon asymmetrical cornhole venmo hexagon succulents. Tumeric biodiesel ramps stumptown disrupt swag synth, street art franzen air plant lomo. Everyday carry pinterest next level, williamsburg wayfarers pop-up gochujang distillery PBR&amp;B woke bitters. Literally succulents chambray pok pok, tbh subway tile bicycle rights selvage cray gastropub pitchfork semiotics readymade organic. Vape flexitarian tumblr raclette organic direct trade. Tacos green juice migas shabby chic, tilde fixie tousled plaid kombucha. +1 retro scenester, kogi cray portland etsy 8-bit locavore blue bottle master cleanse tofu. PBR&amp;B adaptogen chartreuse knausgaard palo santo intelligentsia. Man bun umami keytar 90’s lomo drinking vinegar synth everyday carry +1 bitters kinfolk raclette meggings street art heirloom. Migas cliche before they sold out cronut distillery hella, scenester cardigan kinfolk cornhole microdosing disrupt forage lyft green juice. Tofu deep v food truck live-edge edison bulb vice. Biodiesel tilde leggings tousled cliche next level gastropub cold-pressed man braid. Lyft humblebrag squid viral, vegan chicharrones vice kinfolk. Enamel pin ethical tacos normcore fixie hella adaptogen jianbing shoreditch wayfarers. Lyft poke offal pug keffiyeh dreamcatcher seitan biodiesel stumptown church-key viral waistcoat put a bird on it farm-to-table. Meggings pitchfork master cleanse pickled venmo. Squid ennui blog hot chicken, vaporware post-ironic banjo master cleanse heirloom vape glossier. Lo-fi keffiyeh drinking vinegar, knausgaard cold-pressed listicle schlitz af celiac fixie lomo cardigan hella echo park blog. Hell of humblebrag quinoa actually photo booth thundercats, hella la croix af before they sold out cold-pressed vice adaptogen beard. Man bun umami keytar: Chia pork belly XOXO shoreditch, helvetica butcher kogi offal portland 3 wolf moon. Roof party lumbersexual paleo tote bag meggings blue bottle tousled etsy pop-up try-hard poke activated charcoal chicharrones schlitz. Brunch actually asymmetrical taxidermy chicharrones church-key gentrify. Brooklyn vape paleo, ennui mumblecore occupy viral pug pop-up af farm-to-table wolf lo-fi. Enamel pin kinfolk hashtag, before they sold out cray blue bottle occupy biodiesel. Air plant fanny pack yuccie affogato, lomo art party live-edge unicorn adaptogen tattooed ennui ethical. Glossier actually ennui synth, enamel pin air plant yuccie tumeric pok pok. Ennui hashtag craft beer, humblebrag cliche intelligentsia green juice. Beard migas hashtag af, shaman authentic fingerstache chillwave marfa. Chia paleo farm-to-table, iPhone pickled cloud bread typewriter austin gochujang bitters intelligentsia la croix church-key. Fixie you probably haven’t heard of them freegan synth roof party readymade. Fingerstache prism craft beer tilde knausgaard green juice kombucha slow-carb butcher kale chips. Snackwave organic tbh ennui XOXO. Hell of woke blue bottle, tofu roof party food truck pok pok thundercats. Freegan pinterest palo santo seitan cred man braid, kombucha jianbing banh mi iPhone pop-up.  Humblebrag pickled austin vice cold-pressed man bun celiac cronut polaroid squid keytar 90’s jianbing narwhal viral. Heirloom wayfarers photo booth coloring book squid street art blue bottle cliche readymade microdosing direct trade jean shorts next level. Selvage messenger bag meh godard. Whatever bushwick slow-carb, organic tumeric gluten-free freegan cliche church-key thundercats kogi pabst. Hammock deep v everyday carry intelligentsia hell of helvetica. Occupy affogato pop-up bicycle rights paleo. Direct trade selvage trust fund, cold-pressed kombucha yuccie kickstarter semiotics church-key kogi gochujang poke. Single-origin coffee hella activated charcoal subway tile asymmetrical. Adaptogen normcore wayfarers pickled lomo. Ethical edison bulb shaman wayfarers cold-pressed woke. Helvetica selfies blue bottle deep v. Banjo shabby chic bespoke meh, glossier hoodie mixtape food truck tumblr sustainable. Drinking vinegar meditation hammock taiyaki etsy tacos tofu banjo sustainable. Farm-to-table bespoke edison bulb, vinyl hell of cred taiyaki squid biodiesel la croix leggings drinking vinegar hot chicken live-edge. Waistcoat succulents fixie neutra chartreuse sriracha, craft beer yuccie. Ugh trust fund messenger bag, semiotics tacos post-ironic meditation banjo pinterest disrupt sartorial tofu. Meh health goth art party retro skateboard, pug vaporware shaman. Meh whatever microdosing cornhole. Hella salvia pinterest four loko shabby chic yr. Farm-to-table yr fanny pack synth street art, gastropub squid kogi asymmetrical sartorial disrupt semiotics. Kombucha copper mug vice sriracha +1. Tacos hashtag PBR&amp;B taiyaki franzen cornhole. Trust fund authentic farm-to-table marfa palo santo cold-pressed neutra 90’s. VHS artisan drinking vinegar readymade yr. Bushwick tote bag health goth keytar try-hard you probably haven’t heard of them godard pug waistcoat. Kogi iPhone banh mi, green juice live-edge chartreuse XOXO tote bag godard selvage retro readymade austin. Leggings ramps tacos iceland raw denim semiotics woke hell of lomo. Brooklyn woke adaptogen normcore pitchfork skateboard. Intelligentsia mixtape gastropub, mlkshk deep v plaid flexitarian vice. Succulents keytar craft beer shabby chic. Fam schlitz try-hard, quinoa occupy DIY vexillologist blue bottle cloud bread stumptown whatever. Sustainable cloud bread beard fanny pack vexillologist health goth. Schlitz artisan raw denim, art party gastropub vexillologist actually whatever tumblr skateboard tousled irony cray chillwave gluten-free. Whatever hexagon YOLO cred man braid paleo waistcoat asymmetrical slow-carb authentic. Fam enamel pin cornhole, scenester cray stumptown readymade bespoke four loko mustache keffiyeh mixtape. Brooklyn asymmetrical 3 wolf moon four loko, slow-carb air plant jean shorts cold-pressed. Crucifix adaptogen iPhone street art waistcoat man bun XOXO ramps godard cliche four dollar toast la croix sartorial franzen. Quinoa PBR&amp;B keytar coloring book, salvia lo-fi sartorial chambray hella banh mi chillwave live-edge. Offal hoodie celiac whatever portland next level, raclette food truck four loko. Craft beer kale chips banjo humblebrag brunch ugh. Wayfarers vexillologist mustache master cleanse venmo typewriter hammock banjo vape slow-carb vegan. "},{"id":19,"url":"https://www.omps.in/conference-on-javascript/","title":"Conference on Javascript","body":"2017/09/09 - Jean shorts organic cornhole, gochujang post-ironic chicharrones authentic flexitarian viral PBR&amp;B forage wolf. Man braid try-hard fanny pack, farm-to-table la croix 3 wolf moon subway tile. Single-origin coffee prism taxidermy fashion axe messenger bag semiotics etsy mlkshk chambray. Marfa lumbersexual meditation celiac. Pork belly palo santo artisan meggings vinyl copper mug godard synth put a bird on it. Cloud bread pop-up quinoa, raw denim meditation 8-bit slow-carb. Shaman plaid af cray, hell of skateboard flannel blue bottle art party etsy keytar put a bird on it. Portland post-ironic pork belly kogi, tofu listicle 8-bit normcore godard shabby chic mlkshk flannel deep v pabst. Pork belly kinfolk fingerstache lo-fi raclette. Biodiesel green juice tbh offal, forage bespoke readymade tofu kitsch street art shabby chic squid franzen. Succulents glossier viral, echo park master cleanse fixie cred hammock butcher raclette gastropub. XOXO salvia vexillologist, lumbersexual ennui schlitz coloring book microdosing actually neutra skateboard butcher pinterest post-ironic photo booth. Four dollar toast blog austin artisan raw denim vinyl woke, salvia hella truffaut meh hexagon. Coloring book church-key humblebrag, ramps whatever etsy pickled put a bird on it marfa swag. Celiac live-edge bushwick, hexagon salvia pok pok neutra four dollar toast PBR&amp;B chartreuse freegan readymade. Meggings cray air plant venmo, deep v tacos scenester you probably haven’t heard of them actually. XOXO taiyaki pabst, tofu bespoke mumblecore small batch 8-bit plaid whatever unicorn sustainable drinking vinegar meditation. Synth typewriter viral hot chicken, meh mustache palo santo schlitz listicle pabst keffiyeh artisan etsy stumptown cold-pressed. Occupy locavore cray irony. Chambray whatever vaporware keffiyeh heirloom vice. Single-origin coffee neutra iPhone lyft. Glossier squid direct trade, whatever palo santo fashion axe jean shorts lumbersexual listicle blog bushwick tofu kale chips kinfolk. Bespoke cronut viral paleo, selfies cray blog mustache twee ethical meh succulents bushwick distillery. Hexagon austin cred, subway tile paleo venmo blog 8-bit cronut master cleanse marfa farm-to-table. Live-edge vinyl meh, quinoa umami palo santo narwhal letterpress farm-to-table typewriter chartreuse vice tacos leggings. Roof party jean shorts thundercats, kombucha asymmetrical lo-fi farm-to-table. Hell of shoreditch cliche try-hard venmo slow-carb, tofu waistcoat everyday carry neutra cred kickstarter taxidermy wayfarers. Direct trade banh mi pug skateboard banjo edison bulb. Intelligentsia cliche quinoa synth umami. Trust fund four loko hoodie paleo cray tote bag slow-carb ennui. Williamsburg food truck intelligentsia trust fund. Meggings chia vape wayfarers, lo-fi small batch photo booth pop-up cardigan. Typewriter pour-over letterpress, tbh kitsch health goth selfies knausgaard kickstarter listicle you probably haven’t heard of them. "},{"id":20,"url":"https://www.omps.in/welcome-to-jekyll/","title":"Welcome to Jekyll!","body":"2017/04/06 - You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post. ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts  Hi, #{name} endprint_hi('Tom')#=&gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk. "},{"id":21,"url":"https://www.omps.in/puppet-on-google-public-clous/","title":"setting up puppet on google cloud.","body":"2017/03/26 - File Locations: Binary Files: /opt/puppetlabs/binSymlinks to : /opt/puppetlabs/puppet/bin Main configuration files: /etc/puppetlabs/puppet main configuration file is puppet. configurationDisplay data with puppet command. puppet agent –version To check the versionpuppet config printpuppet config print confdirpuppet conifg print certnamepuppet config print {confdir rundir ssldir runinterval(default to 30 mins. )} Installing puppet master. 2 tasks  add puppet repossudo yum install -y http://yum. puppetlabs. com/puppetlabs-release-el-7. noarch. rpm install the serverSetting up directory environment Checking the defaults for new environmentsudo puppet config print modulepath –section master –environment test Fixzing the certifcate 1234567On the server: Stop Puppet Server. On the CA server: Revoke and clean the server’s old certificate. (puppet cert clean &lt;NAME&gt;)On the server: Delete the old certificate (and any old certificate signing requests) from the ssldir. On the server: Run puppet agent -t --ca_server &lt;CA HOSTNAME&gt; to request a new certificateOn the CA server: Sign the certificate request, explicitly allowing alternate names (puppet cert sign --allow-dns-alt-names &lt;NAME&gt;). On the server: Run puppet agent -t --ca_server &lt;CA HOSTNAME&gt; to retrieve the cert. On the server: Start Puppet Server again. https://docs. puppet. com/puppet/latest/configuration. html#dnsaltnames"},{"id":22,"url":"https://www.omps.in/wodpress-on-docker/","title":"Wordpress on Docker","body":"2017/03/26 - Install Docker: Install docker on to your system. Docker is only workable for 64 bit system. Install a 64 bit linux system, and further install docker on the same. The installation document for different OSes can be found at. Installation guide Install Mysql: Install mysql using docker. 1 docker run --name wordpressdb -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=wordpress -d mysql:5. 7Install wordpress: Install wordpress on docker 1 docker run -e WORDPRESS_DB_PASSWORD=password -d --name wordpress --link wordpressdb:mysql -p 127. 0. 0. 2:8080:80 -v  $PWD/ :/var/www/html wordpressThe $PWD is the local dir which is mapped to /var/www/html/ "},{"id":23,"url":"https://www.omps.in/wordpress-permalinks/","title":"Wordpress permalinks.","body":"2017/03/25 - Everytime I need to setup permalinks, I miss some of the important things to check before hand. This is my document to setup wordpress permalinks. Working with wordpress permalinks. : Wordpress Permalinks are important to beautify your wordpress blog links. Configuring apache. : Ensure you have mod_rewrite enabled. I have apache2 setup so its pretty simple to setup mod_rewrite in there. # a2enmod rewrite # service apache2 restart This enables mod_rewrite for apache. checked using the phpinfo page Configure your site. : Need to configure your apache site to use or enable it to use mod_rewrite feature. Inside your block enable AllowOverride. 123&lt;Directory&gt;   AllowOverride All&lt;/Directory&gt;Configure your wordpress. : Go to wordpress and configure your permalinks. The permalinks create the . htaaccess file in your document root. Well All this is help you setup permalinks for wordpress. "},{"id":24,"url":"https://www.omps.in/google-cloud-onboard-resources/","title":"Google Cloud Platform","body":"2017/03/23 - Google cloud platform. : Introduction to Google Cloud Platform. :    Why Google Cloud Platform?     Pricing Philosophy     Data Centers     Google cloud platform product overview     Google cloud platform solutions  Getting started with Google Platform Cloud. :    Cloud SDK Installation and Getting started.     ‘gcloud’ tool guide     IAM Identity and Access Management     Configuring permission on Google Cloud Platform     Google cloud platform security  Google App Engine and Google Cloud Datastore:    App Engine Overview     Devbytes - Scale your app     Datastore concepts overview     Google cloud Datastore API - Getting Started.  Google Cloud Platform Storage Options:    Cloud storage overview     DevBytes - File storage in the cloud.     Cloud SQL: Features pricing and documentation.     Getting started with Google Cloud SQL     Overview of Cloud Bigtable  Google Container Engine:    Container Engine Overview     Container Engine Tutorials     Kubernetes  Google Compute Engine and Networking:    Google Container Engine     Google Cloud CDN     Google Cloud Stackdriver     Google Cloud Deployment Manager     Google Cloud Source Repositories  Big Data and Machine Learning:    Google Big Data Platform     Google Machine Learning Platform  Some interesitng google links:    Google Network Details.     Tutorials, architecture guides     Site Reliablity Handbook     GIF Search Engine     Google Developer Expert.                 Google Cloud Platform guided, tutorial, hands-on coding experience           https://codelabs. developer. googlle. com             Google Platform Github page     Google Cloud Platform YouTube Channel     Google Cloud Platfrom India Twitter Handle     Google Research White papers     Google Training   Other Google Courses"},{"id":25,"url":"https://www.omps.in/jekyll-pitfalls/","title":"Working with Jekyll - Common Pitfalls","body":"2017/03/17 - Pitfall 1:       jekyll 3. 3. 0   Error: Could not find a JavaScript runtime. See https://github. com/rails/execjs for a list of available runtimes.    install nodejs sudo yum install -y nodejs "},{"id":26,"url":"https://www.omps.in/ansible-pitfalls/","title":"Working with ansible - Pitfalls","body":"2017/03/17 - Pitfall 1: lib/python3. 5/site-packages/Crypto/Util/number. py:57: PowmInsecureWarning: Not using mpz_powm_sec.  You should rebuild using libgmp &gt;= 5 to avoid timing attack vulnerability. Lib GMP is GNU multiple precision arithmentic library. download and follow the steps as below.  Need to get the development tools installed on to the system. yum -y group-install “Development Tools” yum -y install gcc libgcc glibs libffi-devel libxml2-devel libxslt-devel openssl-devel zlib-devel bzip2-devel ncurses-devel    Download the gmp libraries from its download site. https://gmplib. org/#DOWNLOAD     compile and install. tar -xvjpf gmp-versionno. tar. bz2cd gmp-versionno/. /configuremakemake checkmake install     one gmp installed rebuild your python PyCryptopip install –ignore-installed PyCrypto  pitfall 2: devopsmain | UNREACHABLE! =&gt; {  “changed”: false,  “msg”: “Authentication failed. ”,  “unreachable”: true} Though the host is reachable it says unreachable, the fix is to add the entry for the same in /etc/hosts file or let your dns tell ansible where the host is. "},{"id":27,"url":"https://www.omps.in/opencart-on-ubuntu/","title":"opencart on ubuntu","body":"2017/01/26 - Opencart is a opensource store front and eCommerce platform which provides the flexiblity and control for managing online stores. This document is going to tell you how to setup opencart on an ubuntu based system. I am intentinally avoiding to use any versions in it, but this document is made using Opencart 2. 3. 0. 2 and Ubuntu 16. 04. This whole setup(opencart with ubuntu) is running on an linode instance. Before we start I assume you are ready with you LAMP stack and you have already set your hostname pointing to the right server. PHP Settings. : Opencart requires certain PHP extensions. apt-get install php-mysql php-gd php-zip php-pclzip php-curl php-mcrypt MySQL Credentials. : In case you do not need to use the root credentials, we need to create user credentials to work with mysql. Also, we do not want to use the default database, hence we shall create a seperate database and grant the newly created user some permissions on it. Login to your mysql instance with root user. On the MySql Prompt. type the below commands. Please note the (;), these are for ending the mysql commands. Create Database and grant user permissions. 123create database webstore;grant all on webstore. * to 'opencart' identified by 'OC@123'; flush privileges;In the example above, webstore is the name of the database for your store, opencart is the username, and OC@123 is the password. You may want to change these as per your requirement. Install opencart: Dowload the opencart installation file from [opencart’s Download][https://www. opencart. com/index. php?route=cms/download] page. Issue the following commands to download and unpack OpenCart: 123cd /optwget http://opencart. googlecode. com/files/opencart_v1. 5. 1. 1. zipunzip opencart_v1. 5. 1. 1. zipYou will now need to move the files located in the “Upload” directory to your web root. For example, if you wanted your OpenCart installation to be located at http://www. example. com, your document root might look something like /var/www/html/example. com/public_html. Next, you will need to make sure that OpenCart has access to write to specific folders and files. Issue the following commands: 123456789chmod 755 image/chmod 755 image/cache/chmod 755 image/data/chmod 755 cache/chmod 755 download/chmod 755 config. phpchmod 755 admin/config. phpchmod 755 system/cache/chmod 755 system/logs/You may then visit your OpenCart instance via a web browser to continue with the installation process. In our example, this would be http://www. example. com. Read and accept the license agreement, and make sure that the pre-installation checks are passed on the second page. Configure the database connection details by providing OpenCart with the MySQL credentials that you created earlier. Additionally, you will also create your administrator user at this time. Be sure to type your password and email address correctly! Once you have completed the installation, be sure to delete the install directory by issuing the following command: 1rm -rf /srv/www/example. com/public_html/installCongratulations! You are now ready to manage your own online storefront! "},{"id":28,"url":"https://www.omps.in/using-ipython-with-python3/","title":"Using Ipython with Python3","body":"2016/05/15 - I started to move along with using python 3, and for the sake of using it, wanted my python shell for to be working properly, now you must have been aware, I use ipython for most of my python work, so while I downloaded and installed python3. I was unable to use ipython. The pip3 install ipython3 didn’t came of much help. Technicall, I am having two versions of python running on to my system, one is the native python version 2. 7. 11 which by default came with my OS, other python version 3. 5. 1 which I had explicity downloaded for using python3. Googling around did helped me, and the solution was pretty simple for implementation. 123456$ which ipython/usr/local/bin/ipython$ which python3/usr/local/bin/python3cp /usr/local/bin/ipython /usr/local/bin/ipython3edit the ipython3 file. 1234567891011#!/usr/local/bin/python# -*- coding: utf-8 -*-import reimport sysfrom IPython import start_ipythonif __name__ == '__main__':  sys. argv[0] = re. sub(r'(-script\. pyw|\. exe)?$', '', sys. argv[0])  sys. exit(start_ipython())Change the shebang which is #!/usr/local/bin/python to #!/usr/local/bin/python3 Save the file. run ipython3, I am assuming /usr/local/bin is in the system path. 1234567891011$ ipythonPython 3. 5. 1 (v3. 5. 1:37a07cee5969, Dec 5 2015, 21:12:44) Type  copyright ,  credits  or  license  for more information. IPython 4. 2. 0 -- An enhanced Interactive Python. ?     -&gt; Introduction and overview of IPython's features. %quickref -&gt; Quick reference. help   -&gt; Python's own help system. object?  -&gt; Details about 'object', use 'object??' for extra details. In [1]: What we basically did, was copied the original ipython file which was being used by python version 2 and ensured that to work with python3 by changing its shebang line, which tells ipython to use the desired python version. In case, if you do not already have ipython installed then pip install ipython will just work, post your python 3 installation. "},{"id":29,"url":"https://www.omps.in/create-box-from-vagrant-virtualmachines/","title":"Create box from vagrant virtualmachines","body":"2016/04/25 - Vagrant Boxes are prepackaged development environments that are the foundation of Vagrant. In most cases, this is usually just a stripped and naked operating system such as Ubuntu, Debian, or CentOS. Boxes exist with the intention to be provisioned with additional features like Apache and PHP using tools like Chef or Puppet. This is really powerful, but it can be time consuming to setup the first configuration and difficult for beginners. Plus, not everyone has the skill-set of a system admin or work with a huge collaborative team. This post will describe to you how to create your own prepackaged Vagrant Box from and existing virtual machine. In my opinion, it’s the quickest and easiest way for beginners to get started with Vagrant. This way you’ll be able to reuse it over and over and even share it. I feel this generally goes against the main idea of Vagrant where you provision your development environments from a single config. You generally lose a lot of the debugging and configurability of your development environment, but this should be helpful for plenty of developers, teams, and projects regardless.  The first thing you’ll need to do is pick a box that you want to build from. The Vagrant Cloud lets you easily find boxes that people have shared. We’ll be working off of Hashicorp’s (Vagrant’s) Precise64. This box is a good one to work off of because Chef and Puppet are already installed, plus all the settings we’re configured by the creator(s) of Vagrant. ![alt text](https://cask. scotch. io/2014/10/popularvagrant. jpg “”)    After you’ve chosen a box, initialize the Vagrant box. Each one is slightly different, but here’s how to do it for the example we’re doing:   vagrant init hashicorp/precise64  This will also create a Vagrant file for you. Now, boot the box with Vagrant by doing (it will need to download if it’s the first time using the it): 1 vagrant up   We’ll now SSH into the box and start customizing it. If you don’t know anything about servers, you can always just use Scotch Box since all of this is already done for you. Here’s how to SSH into the box:   vagrant ssh  Now, we need to setup our server by installing whatever we want on it. This example will install a basic LAMP stack, but you can do whatever you like (Ruby, Nginx, etc. ). The point of this article isn’t to teach you how to setup a server, but instead how to turn your virtual environment into a Vagrant Box. So this step might be more involved than what is actually shown: 12345678910sudo apt-get updatesudo apt-get upgradesudo apt-get install vimsudo apt-get install apache2sudo apt-get install mysql-server libapache2-mod-auth-mysql php5-mysqlsudo mysql_install_dbsudo /usr/bin/mysql_secure_installationsudo apt-get install php5 libapache2-mod-php5 php5-mcryptsudo apt-get install php5-cgi php5-cli php5-curl php5-common php5-gd php5-mysqlsudo service apache2 restart   We’re now going to clean up disk space on the VM so when we package it into a new Vagrant box, it’s as clean as possible. First, remove APT cache   sudo apt-get clean  Then, “zero out” the drive (this is for Ubuntu): 12sudo dd if=/dev/zero of=/EMPTY bs=1Msudo rm -f /EMPTYLastly, let’s clear the Bash History and exit the VM: 1 cat /dev/null &gt; ~/. bash_history &amp;&amp; history -c &amp;&amp; exit   We’re now going to repackage the server we just created into a new Vagrant Base Box. It’s very easy with Vagrant:   vagrant package –output mynew. box     The previous command will have created a “mynew. box” file. You can technically put this wherever you want on your computer. Now, let’s add this new Vagrant Box into Vagrant:   vagrant box add mynewbox mynew. box  This now will “download” the box into your Vagrant install allowing to initiate this from any folder, but before we do this, let’s delete and remove the Vagrant file we built this box from. 12vagrant destroyrm Vagrantfile   We need to now initialize a Vagrant environment from our brand new box using the same command from earlier but referencing the new Box.   vagrant init mynewbox     When you initialize the Vagrant environment, it creates a Vagrantfile for you (just like from before). Open the Vagrantfile and delete everything. You can use what was in there as a reference or just use Vagrant’s Official Docs, but we’re going to only use the absolute essentials that I’ve already spelled out for you.  Now paste the following bare-bones code into your Vagrantfile: Now let’s create a landing page: 12 cat index. php phpinfo(); Now, visit the IP address from the Vagrantfile in your browser. If everything works, you should see a PHP info dump of the index. php file you just created. ![alt text](https://cask. scotch. io/2014/10/vagrantsuccess. jpg “”)  Now that you’ve just created your own Vagrant Base Box from an existing one, you should consider sharing it on the Vagrant Cloud. This way other people can download and use it!There are tons of way of building Vagrant Boxes, and this method is only intended to get you started in the easiest and fastest way. You should consider these additional resources if you want to build from scratch or use a service to help you with the process: Packer. io – A tool for creating identical machine images for multiple platforms from a single source configuration. PuPHPet – A simple GUI to set up virtual machines for Web development. Building a Vagrant Box from Start to FinishCreating a Custom Vagrant Box from ScratchVagrant: Up and RunningShell ProvisionerChef Solo ProvisionerPuppet Apply Provisioner Alternative, if you want to just focus on the code and still use Vagrant, you can use my Vagrant Base Box, Scotch Box. Note: text verbatim from https://scotch. io/tutorials/how-to-create-a-vagrant-base-box-from-an-existing-one. "},{"id":30,"url":"https://www.omps.in/howto-tweet-new-posts-in-octopress/","title":"Tweet Posts with Octopress","body":"2016/04/24 - Thanks to the blog post by Tony Guntharp who got inspired from another blog post by Adnan Abdulhussein on how to integrate twitter posting with Octopress. His post was some 3 Years old and the twitter gem for Octopress version 5. 16. 0 has gone through a lot of changes, So technically I did some rewrite into the ruby configuration code and fixed it so I can post the tweets with the latest twitter gem. The basic idea remains the same taken from the predecessors blogs, you create a post and print the tweet message you want to give and it create a link to the post in the tweet_queue file. When the rake deploy task is called, it reads from the tweet_queue file and tweets what’s in their line by line. This way you can create multiple posts at a time, and they all will be tweeted when you run your rake deploy task for your blog. Create a twitter application. : A twitter application is must to post to twitter. Head over to https://apps. twitter. com/app/new, sign in and create a new application for your blog. In settings: ensure read and write is enabled. In Keys and access tokens: take note of the following details.  Consumer Keys Consumer Secret Access Token Access Token SecretInstall the gem: We’ll be using the twitter gem to update the status. Put the below line in your development Gemfile 1gem twitterfrom the terminal run bundle install Configure Octopress to use twitter gem: Open the Rakefile in your favorite editor and add the below near the top with other required in the Rakefile. 1require twitterAdd the following lines after the server_port line ```ruby Twitter Configuration  # Twitter config (for tweeting posts)  client = Twitter::REST::Client. new do |config|   config. consumer_key = “YOUR_CONSUMER_KEY”   config. consumer_secret = “YOUR_CONSUMER_SECRET”   config. access_token = “YOUR_ACCESS_TOKEN””   config. access_token_secret = “YOUR_ACCESS_TOKEN_SECRET  end 12# MAKE SURE THERE IS A TRAILING SLASH, otherwise the linking won't workblog_url =  YOUR_BLOG_URL/  ```ensure the trailing slash(/), It is required to append the date-name combination of the posts to form the url of the post. Modify the new_post rake task: Search for :new_post rake task in the Rakefile and replace the task with the following. ```ruby Modifying new_post task usage rake new_post[my-new-post] or rake new_post[‘my new post’] or rake new_post (defaults to “new-post”)desc “Begin a new post in #{source_dir}/#{posts_dir}”task :new_post, :title, :tweet do |t, args| raise “### You haven’t set anything up yet. First run rake install to set up an Octopress theme. ” unless File. directory?(source_dir) mkdir_p “#{source_dir}/#{posts_dir}” args. with_defaults(:title =&gt; ‘new-post’, :tweet =&gt; ‘’) title = args. title filename = “#{source_dir}/#{posts_dir}/#{Time. now. strftime(‘%Y-%m-%d’)}-#{title. to_url}. #{new_post_ext}” if File. exist?(filename)  abort(“rake aborted!”) if ask(“#{filename} already exists. Do you want to overwrite?”, [‘y’, ‘n’]) == ‘n’ end puts “Creating new post: #{filename}” open(filename, ‘w’) do |post|  post. puts “—”  post. puts “layout: post”  post. puts “title:  #{title. gsub(/&amp;/,’&amp;’)} ”  post. puts “date: #{Time. now. strftime(‘%Y-%m-%d %H:%M’)}”  post. puts “comments: true”  post. puts “categories: “  post. puts “—” end tweet = args. tweet if not tweet == ‘’  # add to twitter status queue  puts ‘Adding post to tweet queue, it will be tweeted after deploying. ’  open(‘tweet_queue’, ‘a’) do |file|   file. puts “#{tweet} - #{blog_url}#{Time. now. strftime(‘%Y/%m/%d’)}/#{title. to_url}/”  end endend 1234567891011121314151617181920212223242526272829303132If you already have a modified task, the only changes are the task declaration ```(task :new_post, :title, :tweet do |t, args|)``` and the last few lines starting with ```tweet = args. tweet```. ### Setup to post tweets on deployLook for the `deplpoy_task` in the `Rakefile` and change or replace the files accordingly. ```ruby Deploy taskdesc  Default deploy task task :deploy do # Check if preview posts exist, which should not be published if File. exists?( . preview-mode )  puts  ## Found posts in preview mode, regenerating files . . .    File. delete( . preview-mode )  Rake::Task[:generate]. execute end Rake::Task[:copydot]. invoke(source_dir, public_dir) Rake::Task[ #{deploy_default} ]. execute # Tweet next if not File. exists? 'tweet_queue' puts  Tweeting. . .   open('tweet_queue', 'r') do |file|  while (line = file. gets)   puts  Tweeting '#{line. gsub( \n ,   )}' for @#{client. current_user. screen_name}. . .     client. update(line)  end end puts  Deleting queue. . .   rm 'tweet_queue'endor just add the #Tweet task in deploy task. Usage: Now while creating your new_post you need to specify a separate message for the tweet when you create a post. This is the best way to give you the option of choosing whether you want to tweet the post or not. It also allows you to add @’s and #’s to the tweet message separately from the post title. For Example: The first part is the URL, and the second part is your tweet message. 1rake new_post[ HowTo Tweet New Posts in Octopress , HowTo Tweet New Posts in Octopress @twitter ]You should be able to see your new post generated by the rake task. Once, this is done. Go Ahead and write into your post and rake gen_deploy should do the rest of it. "},{"id":31,"url":"https://www.omps.in/working-with-octopress/","title":"working with octopress","body":"2016/04/23 - Good old saturday. : Well it is the good old saturday, when I planned to blog about something after around 2 weeks.  2 Weeks earlier: Two weeks earlier I sat up, migrated my blog from pelican to octopress keeping the underlying githubpages intact, hardly did I know after two weeks, I will again face the similar problem like with pelican, In anycase this time I was determined not to rework again on migration to a new platform, and Instead I will fix what was missing and will try to resolve the issue with octopress only. Today: My octopress did worked fine without any error, I made some cosmetic changes to the blog and published some post. The problem happened as the blog and the changes did not published, while I am making changes, the rake deploy did worked but I was not able to see anychanges happening to my blog page. But yes, the rake preview did worked fine and I was able to see my changes to localhost. Tried fixing it hard for sometimes but I didn’t work. To make it work, I deleted my github. io repository from github, ran the command rake github_setup_pages pushed the content from my local repository back to github again, and well, after this I was able to see the changes on the web. That’s a releif. Finally, I made some cosmetic changes, write this as my notes on to what happened and how I fixed it. I also need to find out why it failed in the first place, I am assuming I changed my Laptop, that could be a reason, but this I am not convinced by this. "},{"id":32,"url":"https://www.omps.in/welcome/","title":"welcome","body":"2016/04/04 - For two years I wanted to write but was figuring out what and how. I think the impossible task was not to figure out, but to sit down and start writing. Finally, I make my mind and start finishing the stuff which I always wanted to finish. I have tidbits kept in here, which soon will be blogged. Its not really for anyone but for myself to keep me notes and help me see the progress. I have done a lot of migration on this blog. From wordpress to octopress to pelican then back to octopress. I think I will stay here with you. Octopress!! well and its just the beginning, I am glad I do not have a lots of posts to migrate. Others may soon follow. "},{"id":33,"url":"https://www.omps.in/aws-cli/","title":"Using AWS CLI","body":"2016/04/01 - Notes on using aws cli. : MY setup. : I am using arch linux running a 32 bit system, kernel version 4. 4. 5 I run an aws system on amazon cloud and beleive me i am always kind of get confused with the immense set of tools they have and most of the time with their data centres. I tend to mess up the data centre and have to browse through all the data centres to find where my ec2 instance is running. I finally decided to have a look at how the aws cli works. aws-cli tool installation. : For aws cli installation on arch linux its pretty simple. You can use yaourt to simple download and install it. I would not go much into how to install yaourt and aws through it. I would write about that sometime later, but for now trush google and arch wiki. yaourt aws-cli it will ask a couple of questions, please keep checking and respond accordingly. configure the aws-cli: This is going to be a walk-through and I am doing it right now. Please bear if it look like random notes. Sign up for an AWS account. : Since I am already done with it. Here is the quick guide at amazon, which will help you in registering on for you.    Open http://aws. amazon. com/, and then choose Create an AWS Account.   Follow the online instructions.     Part of the sign-up procedure involves receiving a phone call and entering a PIN using the phone keypad.  AWS sends you a confirmation email after the sign-up process is complete. At any time, you can view your current account activity and manage your account by going to http://aws. amazon. com and clicking My Account/Console. To get your access key ID and secret access key: Amazon recommends we create a IAM account key instead of the root aws key, this will let us manage our console securly. I will prefer the IAM account key and here are the steps.    Open the IAM console.     In the navigation pane, choose Users.     Choose your IAM user name (not the check box).     Choose the Security Credentials tab and then choose Create Access Key.     To see your access key, choose Show User Security Credentials. Your credentials will look something like this:   Access Key ID: AKIAIOSFODNN7EXAMPLESecret Access Key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY Choose Download Credentials, and store the keys in a secure location. Configure the CLI:    This is quite simple   $ aws configure  AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE  AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY  Default region name [None]: us-west-2  Default output format [None]: ENTER     Well now its not a lot simple. The problem is the user which is configured doesn’t have access to any policy and without any policy one cannot be able to run commands. I did the basic testing without any policy and well. this is what happened.   [~ (master)]$ aws ec2 create-security-group –group-name my-sg –description “My security group”   A client error (UnauthorizedOperation) occurred when calling the CreateSecurityGroup operation: You are not authorized to perform this operation.   [~ (master)]$ aws ec2 describe-instances –output table –region us-west-2   A client error (UnauthorizedOperation) occurred when calling the DescribeInstances operation: You are not authorized to perform this operation.  So the smart thing to do is to go back and attach a policy to it. This is my first time, so without taking time going through the nifty details of what each policy meant. I just attached the AdministratorAccess policy.   {  “Version”: “2012-10-17”,    “Statement”: [      {    “Effect”: “Allow”,      “Action”: “”,        “Resource”: “”      }    ]  } Now, the commands work like a charm. 123456789101112131415161718[~ (master)]$ aws ec2 create-security-group --group-name omps-sg --description  My security group {   GroupId :  sg-51146e36 }[~ (master)]$ aws ec2 describe-instances --output table --region us-west-2------------------------------------------------------------------------------------|                 DescribeInstances                |+----------------------------------------------------------------------------------+||                 Reservations                 |||+----------------------------------------+---------------------------------------+||| OwnerId                | 855938437083             |||| ReservationId             | r-2ce7c3e9              |||+----------------------------------------+---------------------------------------+||||                  Instances                 |||||+------------------------+-----------------------------------------------------+||||| AmiLaunchIndex    | 0                         |||||| Architecture     | x86_64                       |||and very long output. Trimmed the output to keep the page short. Thats it. I would probably write more about IAM Policies later. "},{"id":34,"url":"https://www.omps.in/day-10-search-and-replace-using-regex/","title":"Day 10 - Search and Replace using regex","body":"2016/01/20 - It is important that I am also should be able to search within my text/code when using the editor. Emacs have commands to search for occurrences of a string within the buffer and across the buffers. Emacs has the commands to replace occurrences of a string with a different string. Emacs provides the ability to search multiple files under the control of a tags table or through dired ‘A’ command , or ask the ‘grep’ program to do it. Incremental Search: All the searches done in Emacs are “incremental” in nature i. e. it starts searching as soon as we start typing the first character of the search string. As we start typing emacs shows where the string and as we type further, would be found. We can end our search using RETURN. KeybindingsCommandsDescriptionC-sisearch-forwardIncremental search forwardC-risearch-backwardIncremental search backward&lt;/div&gt; Basic incremental search: Incremental search starts a forward incremental search. It reads characters from the keyboard, and moves point just past the end of the next occurrence of those characters in the buffer. When you type C-s and then F that puts the cursor after the first ‘F’ that occurs in the buffer after the starting point then if you type O it moves the cursor to just after the FO. At each step emacs highlights, the “current match” – the buffer text which matches the string – using the ‘isearch’ face. The current search string is also displayed in the echo area. While we made mistake typing the search string, just press &lt;DEL&gt;. Each &lt;DEL&gt; cancels the last character of the search string. Once satified, press Typing ```C-a``` exits the search and moved to the beginning of the line. As an exception, entering when the search string is empty launches nonincremental search. When you exit the search, it add the original value of the point to the mark ring, without activating the mark; use C-u C-&lt;SPC&gt; to return to where you were before the beginning the search. Use C-r to search backwards. A backward search finds matches that end before the starting point. Repeating incremental search: Suppose you searched for some word ‘FOO’ and find a match, but its not the one you expected to find, typing C-s again will jump to the next occurence of the word FOO, repeat this any number of time, till you reach the correct instance. If you overshoot(i. e. added more characters to the search string) your search string cancel the same using the &lt;DEL&gt; character, which will delete the last visible character in the search string. When you pause a little after typing your search string, Emacs highlights all the possible matches for the search string. This helps in anticipating how many ‘C-s’ or ‘C-r’ you may need to type before you end at the right search. The other matches are highlighted differently than the current match, this can be changes by customizing the face lazy-highlight. This feature can be disabled by setting isearch-lazy-highlight to nil. Once exited from the search the same string can be used to search again using ‘C-s C-s’ , the first ‘C-s’ invokes the search, the second ‘C-s’ means search again. The similar concepts can be applied while searching backward. While searching forward, you realise, that what you are looking for is before the starting point, you can easily switch with ‘C-r’. To reuse a search string, use the “search ring”. The commands M-p and ‘M-n’ move through the ring to pick a search string to reuse. It leaves the selected search ring element in the minibuffer, which can then be edited. If we just need to edit the current search string in the minibuffer without replaying it with items from the search ring, type ‘M-e’, then type , 'C-s' or 'C-r' to finish editing and search for the string. Erros while incremental search: After typing the search string and if the search string is not found in the buffer, the echo area will say Failing I-Search, and the cursor moves to the place where Emacs found as much of your string as it could. Thus, if you search for ‘FOOT’ and there is no ‘FOOT’ in the buffer, then the cursor would be placed after ‘FOO’ in ‘FOOL’. While, in the echo area, the part of the search string that failed to match is highlighted using face isearch-fail. We can correct our string if it was mis-typed, if we liked the place where it is found we can remain there by pressing or can just remove the character from search string which cannot be found by typing 'C-g', so this will remove the 'T' in 'FOOT' which could not be found and leaving those that are found. i. e will leave the 'FOO' in 'FOOT', repressing 'C-g' cancels the search altogether and return to the point where it was before the search has started. Special input for incremental search: There are characters which has special effects when typed during incremental search. In default, the incremental search perform lax space matching i. e. each space, or sequence of spaces, matches any sequence of one or more spaces in the text. Hence, ‘foo bar’ will match ‘foo bar’, ‘foo bar’, ‘foo bar’, and so on but it will not match ‘foobar’. Emacs matches each sequence of space characters in the match string to a regular expression specified by the variable search-whitespace-regexp. To toggle lax space matching ‘M-s ' isearch-toggle-lax-whitespace, and to disable this feature entirely set search-whitespace-regexp to nil, and then each single space will be matched to single space only. By default the searches in emacs are case-insenitive, when there is an uppercase letter is present in search string, the searches become case-sensitive, once the upper case letter it deleted the search string becomes case-insensitive again. KeybindingsCommandDescriptionM-s i&#xa0;isearch-toggle-invisibleC-s C-j&#xa0;search for newline characterC-s C-\\isearch-toggle-input-methodToggle the input methodC-s C-^isearch-toggle-specified-input-methodprompts for the name of the input method. C-s M-%query-replace or query-replace-regexpwith current search string used as a string to replace. C-s M-&lt;TAB&gt;isearch-completetries to complete the search string using the search ring as a list of completion alternatives. C-s C-h C-h&#xa0;Interactive help. C-s C-yisearch-yank-killAppends the current kill to the search string. C-s M-yisearch-yank-popIf called after 'C-y', replaces the appended text with an earlier kill, similar to usual 'M-y'. C-s C-wisearch-yank-word-or-charAppends the next character or word at point to the search string. C-s M-s C-eisearch-yank-lineAppends the rest of the line to the search string. if point is already at the end of a line, it appends the next-line. C-s C-M-wisearch-del-charDeletes the last character from the search string. C-s C-M-yisearch-yank-charAppends the character after the point to the search string. Alternately, to add the character after point by entering minibuffer with 'M-e' and type 'C-f' at the end of the search string in the minibuffer&#xa0;&#xa0;&#xa0;Search for non-ASCII characters. C-q non graphical characterC-x 8 &lt;RET&gt;Use an INPUT Method, so if the INPUT method is enabled in the current buffer so when you start the search, you can use it in the seach string also. &#xa0;Not exiting incremental search: There are two categories of commands which you can type without exiting the current incremental search. They are    Prefix argumentsWith these arguments, by default it will apply either to the next action in the search or to the command that exits the search. When isearch-allow-prefix is set to nil, entering a prefix argument will terminate the search.     Scrolling commandsScrolling commands exit search. changing variable isearch-allow-scroll to non-nil value, this enables the use of the scroll-bar as well as keyboard scrolling commands. The isearch-allow-scroll also afects some other commands, such as C-x 2 and C-x ^ which don’t actually scroll but do affect where the text appears on the screen.  Searching the minibuffer: If you start search while the minibuffer is active, Emacs searches the content of the minibuffer. If the search fails in the minibuffer, it tries searching the minibuffer history. The minibuffer can be visualized in series of pages. A forward search searches forward to later pages and similarly a reverse search does the backward search. If the current search is a history element, that history element is pulled in the minibuffer. Even you exit the incremental search by press RET, the point remains in the minibuffer unless it is specifically cancelled using C-g. Non Incremental search: So we have visited how the incremental search works, i. e while you type the characters the emacs already begun it searching process and as every word gets added it moves you closer to what you are looking for, and if this is too annoying, emacs does have a conventional non-ncremental search, which require the complete string to present before it start searching. KeybindingDescriptionC-s &lt;RET&gt; STRING &lt;RET&gt;search for stringC-r &lt;RET&gt; STRING &lt;RET&gt;Search backward for string&#xa0;&#xa0;&lt;/div&gt;&lt;/div&gt; Search for word. : A “word search” finds a sequence of words without regard to the type of punctuation between them. For instance, if you enter a search string that consists of two words seperated by a single space, the search matched any sequence of those two words separated by one or more spaces, newlines, or other punctiation characters. Useful for searching text documents where you do not have to worry about the words you are looking for and wether they are sperated by newlines of spaces. &lt;/p&gt; KeybindingCommandsDescriptionM-s-wisearch-toggle-wordif incremental search is active toggle to word search mode. &#xa0;isearch-forward-searchingbegin and incremental forward word search. M-s-w &lt;RET&gt; WORDS &lt;RET&gt;&#xa0;similar to the non-incremenatal forward search. M-s w C-r &lt;RET&gt; WORDS &lt;RET&gt;&#xa0;similar to non-incremental backward search. &lt;/div&gt;&lt;/div&gt; search for symbols. : It is just like normal search, except the boundaries of the search must match the boundaries of the symbol. This feature is mainly useful for searching the source code.  KeybindingCommandDescriptionM-sisearch-toggle-symbolIf active incremental search is, toggle symbol search mode. &#xa0;isearch-forward-symbolelse, begin an incremental forward search. M-s . &#xa0;Start incremental symbol searching forward with the symbol found at the point is added to the initial search. M-s \_ &lt;RET&gt; SYMBOL &lt;RET&gt;&#xa0;Searches forward for symbol non-incrementally. M-s \_ C-r &lt;RET&gt; SYMBOL &lt;RET&gt;&#xa0;Search backward for symbol non-incrementally. &lt;/div&gt;&lt;/div&gt; search using regular expressions. : A regexp denotes a class of alternative strings to match. Emacs provides both incremental and non-incremental ways to search for a match for a regexp. Below is the syntax for regluar expressions. KeybindingsCommandDescriptionC-M-sisearch-forward-regexpBegin incrmental search. C-M-risearch-backward-regexpBegin reverse incremental search. C-M-s &lt;RET&gt;re-search-forwardnon incremental forward searchC-M-r &lt;RET&gt;re-search-backwardnon incremental backward search&lt;/div&gt; Understanding Regular expressions (regex): The Emacs Regular Expression have syntax in which a few characters are special constructs and the rest are ordinary. I will just go through the special constructs below, this would be similar to what the emacs tutorial says about regex, except I am putting it in the tabular format. RegexDescription'. ' (period)Matches any single character except a new line. '\*'Means to match preceding regular expression any no. of time as possible. '+'Matches the preceding expression atleast once. '?'Matches the expression either once or none. '\*?', '+?', '??'Non-greedy variants of above operators. '\\{N\\}'That the preceding regular expression matches exactly N times in a row. '\\{N,M\\}'Match N times but not more than M times. '[ &#x2026; ]'Set of character within the bracket. '[:char classes:]'Encloses character classes. [[&#xa0;&#xa0;Searching and cases: While searching within emacs, emacs usually ignores the case of the text which is being searched through, when the search is specified in lower case, for example, searching for word ‘nutrients’ so while typing the word in incremental search will match ‘nutrients’ begining with either ‘Nutri’ and ‘nutri’. Likewise, ‘[ab]’ matches ‘a’, ‘A’, ‘B’, ‘b’. Any appearance of the uppercase letter within the search makes the searches case-sensisive, thus, searching for ‘Nutri’ doesn’t matches ‘nutri’ and ‘NUTRI’. Typing ‘M-c’ within an incremental search toggles the case sensetivity of that search. When we set case-fold-search to nil then all the letters must match exactly incuding the case. This is per-buffer variable, setting this variable to a particular buffer will only affect that buffer and will have no effects on the other buffers. The effect of this variable applies to non-incremental searches and to the replace commands as well. Replaement commands: There is a simple replace command as M-x replace-string which replaces the occurunces in the buffer. M-% command is for query replace, which presents each occurence of the pattern and asks wether to replace it. The replace command usually work from the point place where your cursor is to the end of the buffer. In an active region replace commands will work in that region only. The basic replace commands replaces one search string with one replacement string. expand-region-abbrevs makes emacs possible to perform several replacements in parellel. Replacement commands do not use lax space matching1 by default and can be enabled by changing the variable replace-lax-withespaces to t. Unconditional replacements:       Unconditional Replacements             M-x replace-string RET string RET newstring RET   Replace all string with new string   This replace every occurence of the string with the new string from the point to the end of the buffer. For doing this in the whole buffer, you must begin with the beginning2 of the buffer. In an active region the replacement is limited to the region. Regexp replacement: Similarly,       Regexp replcatement commands.              M-x replace-regexp RET regexp RET newstring   Replace every match for regexp with the new string.    Here the newstring need not required to be constant: it can refer to all or part of the string as matched by the regex. \&amp; in newstring stands for the entire match being replaced. \d in newstring where d = digit, stands for whatever matched the d/th/ parenthesized grouping in regexp, also called as backrefrence. # refers to the count of replacements already made in this command. \? will asks for the replacement string each time. Examples: M-x replace-regexp RET c[ad]+r RET \&amp;-safe RET : replaces cadr with cadr-safe and cddr with cddr-safe M-x replace-regexp RET c[ad]+r-safe RET \1 RET: performs the inverse of above. Command and case: Cases in emacs replace the similar way as it is in incremental search i. e. if the first argument of the replace command is all in lower case it ignores the cases. However, if the case-fold-search is set to nil, case would be significant in the searches. Query Replace:       Keybinding   Description         M-% string RET newstring RET   Replaces some occurrences of string with newstring.        C-M-% regexp RET newstring RET   Replace some matches for regexp with new string.    if you want to change only few occurrences and not all of them in the buffer the M-% (query-replace) will replace the words one by one and ask for your permission before doing it. Similarly, C-M-% performs performs regexp search and replace (query-replace-regexp). It works like replace-regexp except it queries like query-replace . Character which are used when a match is shown in query-replace or query-replace-regexp       Characters   Their actions while in query-replace         SPC, y   Replace       DEL, n   Skip to next occurrence       , (comma)   Replace and display result.        C-r   To undo the replaced text. C-x u can also be used.        RET, q   Exit without doing any more replacements.        . (period)   Replace this one and exit, do not replace any more.        ! (exclamation)   Replace everything do not ask me again.        Y (UPPERCASE)   Replace all remaining occurrences in all remaining buffer in multi-buffer replacements       N (UPPERCASE)   Skip to the next buffer in the multi-buffer replacement without replacing remaining occurrences in the current buffer.        ^ (caret)   Go back to the position of the previous occurrences.        C-w   to delete the occurrences and enter into recursive editing level.        e   Edit the replacement string in the mini-buffer. This also becomes new replacement string for any further occurrences.        C-l   Re-display the screen.        C-h   Display message summarizing these options.    Some more commands for searching and looping:       Keybindings   Description         M-x multi-search-buffers   Prompt for one or more buffer name ending with RET. Do an incremental search in all the buffers.        M-x multi-isearch-buffers-regexp   same as multi-isearch-buffer, except it performs incremental regexp search.        M-x occur   Prompt for a regexp and display a list showing each line in buffer that contains a match for it. To limit the search to part of the buffer, narrow to that part. In the occur buffer you can click on each entry or move point there and type RET, to visit the corresponding position in the buffer that was searched. o and C-o display the match in another window. Typing e in the occur buffer switches to occur edit mode, in which edits made to the entries are also applied to the text in originating buffer. Type C-c C-c to return to the occur mode. Command M-x list-matching-lines is synonymous to Occur mode.        M-s o   Run occur using the last used search string. Running M-s o when the search is active used the current search string.        M-x multi-occur   This command is like occur, except it is able to search through buffers. It asks for the buffer names one-by-one.        M-x multi-occur-in-matching-buffers   Same as multi-occur, except the buffers to search are specified by regular expression which matches visited file names.        M-x how-many   Prompt for regexp and print for the number of matches for it in the buffer for point.        M-x flush-lines   Prompt for regexp and delete the line which contains the match for it, operating on the text after point. This deletes the current line if it contains the match starting after point.        M-x keep-lines   Prompt for regexp and deletes the line which doesn’t contain the match regexp. This command always keeps the current line where the match is found.    "},{"id":35,"url":"https://www.omps.in/day-9-cut/","title":"Day 9 - Cut, Copy, Paste","body":"2015/12/28 - As in my last post and coming posts I would be using org2blog to write content further to my blog sites and would further be writing about how to use customize it, in my later posts. This is a cool tool to use when you are writing and posting. In my earlier days of using computers, copy and pasting something was such an interesting thing to do and the most innovative thing possibly could happen to computers. we just copy things around and move on. I started using emacs some couple of years back, and using it fully only some months back. So many things I learnt and learning. Believe me today, I am amused to know the possiblities cut and paste does have.  In Emacs, killing means erasing the text and copying it into the “kill ring”. “Yanking” means bringing it back. The generalized terms for these are cutting and paste, copy and paste. Killing and yanking a text are the most common ways to move or copy text within emacs. Commands which remove textMost commands which erases text from the buffer saves it in the kill ring. These are known as “kill” commands. We usually on other editors or place also call it is cut. But Emacs, unlike other editors, stores several recents cuts and not just the last one, which makes killing a safe process, now I don’t have to worry about loosing my text. Never felt this confident earlier while killing something. :) The kill ring is shared by all buffers , so the text that’s killed is shared among all the buffers. ‘C - /’ (undo) to undo a kill comannd and bring the killed text back into the buffer, but will keep the killed buffer in the kill ring and this can also be used elsewhere. On graphical displays, killing some text back copies it to the system clipboard as well and then there are commands which kills the text but do not save it into the kill-ring are called as the delete command. ‘C-d’ (delete-char) and ‘DEL’ (delete-backward-character) will delete only one character at time, and those character which deletes only spaces or newlines, killing erase signigicant amount of nontrivial data and do a kill operation as mentioned above. Deletion: This will erase the text and not saving in the kill ringh. In emacs, usually those command used for deletion, just delete a character at a time or whitspaces. Some of the delete commands to avoid future confusion. KeybindingsCommandsDescriptionDEL or&#xa0;&#xa0;Backspacedelete-backward-charDelete the previous character or text in the regionDeletedelete-foward-charDelete the next character or the next in the region if it's active. C-ddelete-charDelete the next character. M-\\delete-horizontal-spaceDelete spaces and tabs around point. M-SPCjust-one-spaceDelete space and tabs around point leaving just one space. C-x C-odelete-blank-linesDelete blank lines aroung the current line. M-^delete-indentationJoin two lines by deleting the intervening newline, along with and indentation following it. Killing or cutting: The simplest way to kill something is using the kill-command i. e. C-k (kill-line), this will invaribaly will remove anything from the point to the end of the line, the point is place where my cursor is, and everything from the cursor to the end of the line would be removed. If the cursor is at the end of the line, it kills the line ending the newline character, merging the next line into the current one; if point is at the beginning of the line, this leave the line blank.  Spaces and tabs are usually ignored while deciding the case to apply. As long as point is after the last visible character in the line, you can be sure that ‘C-k’ will kill the newline; hence to kill an entire non-blank line, go to the beginning of the line and type ‘C-k’ twice. This can also be done by giving the positive arguments to ‘C-k’, and with negative arguments it kill the previous lines before the point. ‘C-k’ cannot be used to kill a character instead use the deletion commands above. Another way to kill the line and its new line is C-S-backspace, it kills regardless of the position where it is. Killing a line acts as cutting line, and saving it into the kill-ring. Remember, killing a line can be recovered from the kill-ring, but not deleting the characters. KeybindingsCommandsDescriptionC-kkill-lineKill the rest of the line from the point. C-S-backspacekill-whole-lineKill an entire line at once. C-wkill-regionKill the region as the name suggets. M-wkill-ring-saveCopy the region into the kill ring. M-dkill-wordkill the next word. M-DELbackward-kill-wordKill one word backwardsC-x DELbackward-kill-sentenceKill back to the beginning of sentence. M-kkill-sentenceKill to the end of sentence. C-M-kkill-sexpKill the following balanced sexp. M-z CHARzap-to-charKill through the next occurence of CHAR. M-w and C-w are commonly used commands, which kils text in the region and save it in kill-ring. M-w is the emacs copy command. The command M-z combines killing with searching, it read a character and kill from point up to the next occurence of that character in the buffer. A numeric argument would act as a repeat count; a negative argument meant search the text backward and kill text before point. The are certain buffers which contain ‘read-only text’ which cannot be modified and therefore cannot be killed, but the kill command still works. they move over text and save it into the kill-ring, without actually deleting the buffer. Normall, they will beep and display error message if this will happen. There may be times when we copy the similar text again, but if we change the varibale ‘kill-do-not-save-duplicates’ to a non-nil value, identical subsequent killls would yeild a single kill-ring entry, without duplication. Commands which insert textIt simply means pasting, and for theory, “Yanking means reinserting text previously killed. ” The basic yanking command is ‘C-y’ (yank). It inserts the most recent kill, leaving the cursor at the end of the inserted text. It also sets the mark at the beginning of the inserted text, without activating it; this lets jumping to the posisition eaisly with ‘C-u C-SPC’. With ‘C-u C-y’ it does exact opposite which means leaving the cursor in the front of the inserted text and sets the mark at the end. ON graphical display the yank command checks the clipboard if any other application has placed any text and is more recently than the last emacs kill. The kill ring: The kill ring is a list of blocks of text that were previously killed. There is only one kill ring shared by all buffers, so we can kill(cut) text from one buffer and yank(paste) it in another buffer. The maximum no. of buffer stored in kill ring is controlled by the variable ‘kill-ring-max’. The default is 60. Emacs cycles the kill ring by removing the older entries if we reach the limit. The actual contents of the kill ring are stored in buffer ‘kill-ring’ and can be viewed using ‘C-h v kill-ring’ Yank(paste)ing earlier kills: Numeric arguments can be used to yank a text that is no longer the most recent. If you remeber the kill entry you can eaisly yank it back. If you don’t remember you can use ‘M-y’ (yank-pop) command to cycle through the possiblities. If the previous command was yank command, ‘M-y’ takes the text that was yanked and replaces it with the txt of the next-to-the-last kill, first use C-y to yank the last kill and then use M-y to replace it with the previous kill. Appending kills: If two or more kill commands are run in a row, combines their text into a single entry n the kill ring, so a single ‘C-y’ yanks all the text as a unit. Basically the commands that kill forward from point add onto the end of the previous killed text. Any sequence of mixed forward and backward kill commands puts all the killed text into one entry without rearrangement and Numeric arguments do not break the sequence of appending kills. KeybindingsCommandsDescriptionC-yyankyank(paste) the last kill in the bufferM-yyank-popreplace the text just yanked with an earlier batch of killed textC-M-wappend-next-killCause the following command if it is a kill command to append to previous killCut and paste in XI have covered enough about copying, cutting and pasting of the text, these all work expeceted in the terminal window, certain further operations are added while we are working with emacs GUI, they mainly involve usage of the OS clipboard along with the kill-ring. On a graphical display it eases us in transferring the data among other applications using clipboard. On X. two other similar facilities are available, known as primary selection and secondary selection, emacs running on the graphical system integrate with these facilities. Emacs by default uses UTF-8 encoding for interprogram text transfers. If you are not happy with the text you pasted(well, I meant the encoding here. ) another coding system can be specified ‘C-x RET x’ or ‘C-x RET X’. Let me briefly go through the available facilities. Clipboard: Its a facility that most graphical applications use for “cutting and pasting”, when it exists emacs is going to use it for its kill and yank commands. When some text is killed or copied to kill-ring, the text is also placed in the clipboard. Usually, emacs wipes the clipboard clean before putting its contents in there, though this behavior can be modified by setting variable ‘save-interprogram-paste-before-kill’ to t. This will allow emacs to first save the contents of the clipboard to its kill-ring before deleting it from the clipboard, preventing you from loosing critical data. Yank commands too uses the clipboard, so if someother program is using the clipboard. The Temp text selection or the Primary Selection: When in X, there is a primary selection containing the last stretch of text selected, usually by dragging the mouse. This is usually seperate from the clipboard. The contents in this selection are changed over every new selection, whereas the clipboard changes is only possible by cutting, copying and pasting. Under X, when the region is active (i. e when primary selection is made or in other words the text is selected by dragging or clicking the mouse or by keyboard commands and moving point. ) The Secondary selection: The X Window system provides a second facility known as the secondary selection. Mouse bindingCommandDescriptionM-Drag-Mouse-mouse-set-secondaryWith one end at the place where you press down the button, and the other end at the place where you release it. This text is highlighted using the \`secondary-selection\` face, as you drag. The windows scrolls automatically if you drag the mouse off the top or bottom of the windowM-Mouse-1mouse-start-secondaryset one endpoint for the secondary selection. M-Mouse-3mouse-secondary-save-then-killSet the secondary selection, with one end at the position clicked and the other at the position specified with M-Mouse-1M-mouse-2mouse-yank-secondaryInsert the secondary selection where you click, placing point at the end of the yanked textAccumulating text: The text can be moved by killing or yanking, but there are other ways that are also convinient methods for copying one block of text in many places, or for copying many scattered blocks of text in one place. CommandsDescriptionM-x append-to-bufferApend region to the contents of a specified bufferM-x prepend-to-bufferprepend region to the contents of a specified bufferM-x copy-to-bufferCopy regions into a specified buffer, deleting that buffers old contents. M-x insert-bufferInsert the content of a specified buffer into current buffer at point. M-x append-to-fileAppend region to the contents of a specified file at the end. M-x append-to-buffer, this reads the buffer name, then inserts a copy of the region into the buffer specified. If you specify non-existent buffer, `append-to-buffer` creates the buffer. The text is inserted whenever point is in that buffer. Point in that buffer is left at the end of the copied text, so successive uses of `append-to-buffer` accumulate the text in the specified buffer in the same order as they were copied.  `prepend-to-buffer` is just like `append-to-buffer` except that point in the other buffer is left before the copied text, so successive prepending happens in the reverse order. As it can append to buffer it can also accumulated the text directly to the file with ‘M-x appened-to-file” only with the files which are not yet being visited to the file. because if we add it to the file we are editing in Emacs, would chnage the file behind Emacs’s back and you can loose your precious editing. Rectangles: “Rectangle” commands operate on rectangular areas of the text: and all of the characters between certain pair of columns, in a certain range of lines. In Emacs there are commands to operate on these rectangular areas, i. e to kill, yank and delete them off. These commands are useful with text in multicolumn formats, and for changing text into or out of such formats. To specify a rectangle for a command to work on, set the mark at one corener and point at the opposite corener. This is called as the region-rectangle. If point and mark are in the same column, the rectangle region is considered empty. The rectangle region is controlled in much similar way as the region is controlled. But remember that a given combination of point and mark values can be interpreted as a region or as a rectangle. Key bindingsCommandDescriptionC-x r kkill-rectanglekill the text of the rectangle region, and saving its contents to the  last-killed-rectangle C-x r M-wcopy-rectangle-as-killSave the text of the region-rectangle as the last-killed-rectangle. C-x r ddelete-rectangleDeletes the text of the region rectangle. The delete command works too. C-x r yyank-rectangleAs the name suggests, it yanks the rectangle. C-x r oopen-rectangleInsert blank space to fill the space of the region-rectangle. C-x r Nrectangle-line-numbersInsert line numbers along the left edge of the region rectangle. C-x r cclear-rectangleCLear the region-rectangle by replacing all of its contents with spaces. M-x delete-whitespace-rectangle&#xa0;Delete whitespaces in each of the lines on the specified rectangle. C-x r t STRING &lt;/td&gt;string-rectangleReplace rectangle contents with STRING on each line. &lt;/tr&gt;M-x string-insert-rectangle STRING &lt;/td&gt;&#xa0;Insert string on each line of the rectangle. &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;## CUA BindingsNow, this is some interesting keybindings provided by emacs to its users who are migrating from windows or other editing systems. The command 'M-x cua-mode  sets up keybindings, that are compatible with the Common User Access (CUA) systems used in many other applications. When CUA mode is enabled the 'C-x', 'C-c', 'C-v', and 'C-z' invoke commands that cut (kill), copy, paste(yank), and undo respectively. The 'C-x' and 'C-c' work only on the active regions. Otherwise they still act as the prefix keys and the standard emacs commands like 'C-x C-c' still works. To enter an Emacs command like \`C-x C-f' while the mark is active, use one of the following methods: either hold \`Shift' together with the prefix key, e. g. , \`S-C-x C-f', or quickly type the prefix key twice,e. g. , \`C-x C-x C-f'. CUA mode provides enhanced rectangle support with visible rectangle highlighting.  Use \`C-RET' to start a rectangle, extend it using the movement commands, and cut or copy it using \`C-x' or \`C-c'.  \`RET' moves the cursor to the next (clockwise) corner of the rectangle, so you can easily expand it in any direction.  Normal text you type isinserted to the left or right of each line in the rectangle (on the same side as the cursor). With CUA you can easily copy text and rectangles into and out of registers by providing a one-digit numeric prefix to the kill, copy, and yank commands, e. g. , \`C-1 C-c' copies the region into register \`1', and \`C-2 C-v' yanks the contents of register \`2'. "},{"id":36,"url":"https://www.omps.in/day-8-mark/","title":"Day 8 - Mark and The Region","body":"2015/12/26 - Mark and the regionMany command in Emacs operate on parts of the current buffer, to specify the text for such commands, we need to select the text, by marking it at one end of it and move the point to the other end. This text between the point and the mark is called as “the region” or “the selection”. This region always extend between the point and the mark, each time you move the point, the region changes. Setting the mark at the position also “activates” it. Emacs indicates the extent by highlighting the text within it, using the ‘region’ face. Further on customizing it can be found under Face Customization. Once the commands are run the region, Emacs automatically deactivates this region and turns off the highlighting; this can also be explicitly deactivate by typing ‘C-g’. Movement commands  doesn't work on the region. The behaviour is known as Transient Mark mode. Disabling mark mode switched Emacs to an alternate behaviour. Also, when you mark something in one buffer, it doesn't have effect in anyother buffer, so while you come back you will see the mark still present at the same buffer at same location. Here are some commands for setting the mark; C is still the ctrl and M- is Meta or Alt or Esc key on your keyboard. keybindingscommandsdescriptionC - SPCset-mark-commandSet the mark at point and activate itC - @&#xa0;The SameC-x C-xexchange-point-and-markset the mark at point and activate it and move point where the mark used to be. Drag-Mouse-1&#xa0;Set the point and mark around the text you drag across. Mouse-3move-save-then-killSet the mark at point, then move point to where you click. Shift and cursor motion keys&#xa0;set the mark at point if the mark is inactive, then move pointOK, so now we know how to mark the text, but why really I want to do it, and learn so many combinations, when it can simply be done by holding and moving the mouse around, remind me of selecting text in browser; well, some real line usage is: say, you want to select some text and make it uppercase, so just select that area of text using any of the above key bindings and run C-x C-u, and you see all the characters becoming uppercase, neat isn’t it, I can use this same mark to remember the text, but ofcourse I can select the position of my text in the buffer too, it reminds me something like bookmark, so for an example in a text file or a code of more than 1000 lines, I encounter something interesting, but have to move ahead also, for this I only see 2 ways, either select and copy the text and save it in some place, or just remember it, the emacs remember function just does that.  I selected a region and do not want to do anything with it as such, but just remember the position of the mark in the buffer type so I type “C-SPC C-SPC” just does that, i. e remember my position, and C-u C-SPC later jumps back to the mark. I will speak more about the mark ring further in Today itself. Oh, now I know why I need it, but it may not be everytime I want to select the text and do something with it, so I activated the mark by mistake using the key C-SPC and now wherever I move the cursor its just getting highlighted, and I am not sure what may happen if I type something, this is a time I really hate myself to be bought in, when I know how to enter into something, but do not know how to come out without making any unknown change. C-g comes to the rescue. It just is so cool, and a saviour isn’t it. Ah, there are endless commands in emacs, and if there aren’t one you can always create one, its pretty simple. For eg. C-x C-x exchanges the positions of the point and the mark(I need to find out its practical use). And there are many ways too to set mark and selecting regionfor eg. I can use mouse by pressing the left mouse button and moving around the text; clicking the right mouse button set the mark at point i. e first you click the left mouse button which will set the mark, right click to the place till where you want to make selection; further to this you can set the mark and use the cursor command or arrow keys to select the text. These are so cool tricks, I so despartley want to make video lessons now, nevermind will try to do some video lessons later once my 30 Days challenge is over. Notes: 1. By any chance if your C-SPC is not working try using C-@ or vice-versa, this is also bound to the set mark command. I am not sure, but then some keyboards might not support C-SPC. Marking objects like word, list, paragraph or page. : As we were taking earlier M-@ extend the mark on word and repeated invocation extend the region by advancing one word at a time and if the mark is active and located before point this same command moves the mark backward from its current position, one word at a time and while working with this we do not have to set the mark as well and it does accepts numeric arguments, so highlighting the next ten words would be C-u 10 M-@. The Numerical argument and repeated invocation works with all the command mentioned in the table, ofcourse, not the last one which marks the whole buffer, I doubt repeated invocation would start marking other buffers too ;). Using the selected region and Operating on the same:  We can kill the region using C-w.  We can copy the region M-w.  Convert the case with C-x C-l or C-x C-u. as its already covered in my previous days, so I will save some effort explaining again.  Undo change C-u C-/.  Replace text withing using M-%. (Yay!! I was wishing I could find something like this. ) Indent it with C-x TAB or C-M-\ Fill it as text with M-x fill-region.  Check the spelling M-$.  Evaluate the lisp code, if you have one M-x eval-region. (Got the similar tip sometime back on IRC, I was earlier while making changes to my . emacs. I was actually closing emacs and then opening again. ) Save it in a register. C-x r s.  and ofcourse save this region in some file. I will be coming to this soon. The Mark RingThe command C-SPC C-SPC is hndy when you want to use the mark to remember a poistion if I wish to remember and may return to it later. It pushes the current point into the mark ring, without activating the mark. To return to the position, we can use ‘set-mark-command’ with a prefix argument C-u C-SPC. This moves the point to where the mark was and deactivates the mark if it was active. Each subsequent C-u C-SPC jumps to a prior position stored in the mark ring. Each buffer has its own mark ring. All editing command use the current buffer’s mark ring. In particular, C-u C-SPC always stays in the same buffer. Marking texts globally: Apart from the ordinary mark ring that belongs to each buffer, Emacs has aloso a single mark mode “global mark ring”. Each time the mark is set, this is recorded in the global mark ring in addition to the current buffer’s own mark ring. Shift Selection: If you hold down the shift key while typing a cursor motion command, the sets the mark before the moving point, so that the region extends from the original position of point to its new position. This feature is referred to as “shift-selection”. It is similar to text is selected in other editors. To turn of shift selection, set ‘shift-select-mode’ to ‘nil’ Disabling transient mark mode: Setting the mark activates and highlights the region, and is also called as Transient Mark mode. This is a minor mode and is enabled by default. It can be toggled with ‘M-x transient-mark-mode’ or with the ‘Active Region Highlighting’ menu item from the options menu. "},{"id":37,"url":"https://www.omps.in/day-7-commands-for-human-languages-and-editing-them/","title":"Day 7 - Commands for human languages and editing them","body":"2015/12/20 - Emacs is wonderful for text editing and related stuff with text. It has many modes which helps in editing and managing text, which help increase the productive overall, here I explored some of the major modes and commands which can quickly help for editing text. Text Editing in Emacs: Emacs has several major modes for handelling text, there is text mode for ordinary text which customizes emacs in small ways for syntactic convention of text. Outline mode provides special commands to handle text, Org Mode extends Outline mode and turns emacs into a full fledged organizer: we can manage TODO Lists, store notes and publish them in many formats and I would speak more about this in my coming days learnings. TeX and LaTeX mode contains embedded commands; HTML mode for HTML and SGML Modes; nxml-mode for XML Mode; Nroff Mode for Groff and Nroff Mode. It is also possible to edit pictures made out of text characters, also referred as *“ASCII art”* using Picture mode. Words: There are several commnads in emacs for operating on words and many of these I have already covered in my Day-1 and Day-4, but let me redo, so I will remeber it for a long time. Again, the M refers the Meta i. e the Alt or Esc key on the keyboard and is followed by the character keys. Key bindingscommandsdescriptionM-fforward-wordSelf descriptive as it moves forward on wordM-bbackward-wordit moves one word back. M-dkill-wordkills up to the end of the wordM-&lt;/td&gt;backward-kill-wordkill backward to the beginning of the word. &lt;/tr&gt;M-@mark-wordMark to the end of the wordM-ttranspose-wordsTranspose the word and drag across othersM-=count-words-regiongives the count of the words in the region. &lt;/tbody&gt;&lt;/table&gt;*NOTES:**1. These keys parrellel with the character-based movements**2. The numeric arguments serves as the repeat count and the negative arguments would make the commands move in the opposite direction. **3. M- deletes the word to the point where M-b would end, it will kill the comma and space as well, M-b M-d to just kill the word but not the comma. **4. If we choose there keybindings in our shell **(set -o emacs)**, these word keybindings can help us in moving around the long commands. *## SentencesThe meta keys are also helpful in moving around the sentences. KeybindingscommandsdescriptionM-abackward-sentenceThis will move the point to the beginning of the sentenceM-eforward-sentenceWill move forward to the end of sentence. M-kkill-sentenceKill forward to the end of the sentence. C-x &lt;/td&gt;backward-kill-sentencekill back to the beginning of the sentence. &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;### Quoting from EMACS Manual\#+BEGINSRC Quote The sentence commands assume that you follow the American typist'sconvention of putting two spaces at the end of a sentence.  That is, asentence ends wherever there is a \`. ', \`?' or \`!' followed by the endof a line or two spaces, with any number of \`)', \`]', \`'', or \` 'characters allowed in between.  A sentence also begins or ends wherevera paragraph begins or ends.  It is useful to follow this convention,because it allows the Emacs sentence commands to distinguish betweenperiods that end a sentence and periods that indicate abbreviations. \\#+ENDSRC Quote*NOTE:**1. To use just one space between sentences, set the variable sentence-end-double-space to nil and to make the sentence commands stop for single spaces. **2. The variable sentence-end controls how to recognize the end of the sentence; its value is a regular expression, which is used to match the last few characters of the sentence. **3. Some languages such as Thai, doesn't end with periods; such cases can be handeld by setting variable sentence-end-without-period to t. *## ParagraphsKeybindingsCommandsDescriptionM-{backward-paragraphmove to the beginning of paragraph. M-}forward-paragraphMove to the end of the next paragraph. M-hmark-paragraphput point and mark around this or next paragraph. M-h C-w&#xa0;kills the paragraph around or after point. *Notes:**1. The definition of a paragraph boundary is controlled by the variables **paragraph-separate** and **paragraph-start**. The value of these are regular expression. **2. In fundamental mode, Paragraph-start is \* \f\\\\|[ \t]\*$ \* and matches lines that either start or separate paragraph. * *3. Paragraph separate is \* [ \t\f]\*$ \* and matches lines that separate paragraph without being part of any paragraph. *## PagesThe files are divided into pages delimited by the  formfeed character  (ASCII code 2, denoted as ) and in emacs is escape sequence . KeybindingsCommandsDescriptionM-x What-page&#xa0;Display the page number and line number within that pageC-x [backward-pageMove point to the previous page boundary. C-x ]forward-pageMove point ot next page boundaryC-x C-pmark-pageput point and mark around this page. C-x C-p C-w&#xa0;select and kill the pageC-x lcount-lines-pageCount the lines in this page. *Note:**page-delimiter control where the page begins. Its a regular expression \* f \* which matches a beginning of a line that separate pages. *## Filling TextFilling text means breaking up the lines that fit a specified width. Emacs does the filling in 2 ways. **Auto Fill Mode** inserts text with self-inserting characters and automatically fills it. **Explicit fill Commands** can be used for editing texts. ### Auto FillThis is a minor mode in which the lines are broken automatically when they become too wide, breaking up of lines only happens when you type or . 'M-x auto-fill-mode' : Toggles the Auto Fill mode. '/' : Break lines when appropriate. From the command line the auto-fill mode enables or disables the mode for current buffer. From LISP *auto-fill* is enabled when called with omitted or nil argument. for enabling in the major modes, add auto-fill-mode in mode hooks. When the mode it enabled it will show **Fill** in the mode line. This mode breaks any line which goes longer than the desired width by pressing or , and to insert a SPACE or any newline without breaking the lines tye **C-q ** or **C-q C-j** and **C-o** for inserting new line. Auto fill mode does not refill the paragraphs; it break lines but does not merge lines, editing in the middle of the paragraph can result in paragraph which is not correctly filled. To fill them correctly we may need to use explicit Fill Commands. ### Fill CommandsKey bindingsCommandDescriptionM-qfill-paragraphFill current paragraphC-x fset-fill-columnSet the fill columnM-x fill-regionfill-regionFill each paragraph in the region. M-x fill-region-as-paragraph&#xa0;Fill the region consider it as paragraph. M-o M-s&#xa0;Center a line. *Notes:**1. M-q and fill-region uses the usual emacs criteria for finding paragraph boundaries, which refills everything between point and mark as single paragraph. **2. Numeric argument to **M-q** justifies the text as well as fill it. **3. To Remove extra spaces, use M-q with no argument. **4. The default vault for fill column is 70. **5. **C-x f** (sets-fill-column) sets the numeric value for fill column. With just C-u as argument it sets fill-column to the current horizantal position of point. **6. By default, emacs consider a period followed by two spaces or by a newline as the end of sentence; a period with just one space will be called as abbrevation and not the end of the sentence. **7. Setting 'sentence-end-double-space' to nil the fill commands will break a line after a period followed by a period and a space. *### The Fill PrefixKeybindingsCommandDescriptionC-x . set-fill-prefixSet the fill prefixM-qfill-paragraphFill a paragraph using current fill prefixM-x fill-individual-paragraphs&#xa0;Fill the region, considering each change of indentation as starting a new paragraph. M-x fill-nonuniform-paragraphs&#xa0;Consider only paragraph separator lines as starting a new paragraph. *Notes:**1. Move to a line which starts with desired prefix, put point at the end of the prefix and type C-x . **2. To turn off a prefix, specify an empty prefix: type C-x . with point at the beginning of line. **3. The fill prefix is stored in fill-prefix variable. if the value is nil, then there is no fill prefix. *This feature allows paragraphs to be filled so each line starts with a special string of characters (such a sequence of spaces, giving and indented paragraph). you can specify fill prefix explicitly; otherwise emacs tries to deduce automatically. ### Adaptive Fill. The fill command deduce the proper fill prefix for a paragraph automatically in some cases; either white spaces or certain precaution characters at the beginning of line are propagated to all lines of the paragraph. If the paragraph has two or more lines, the fill prefix is taken from the paragraph's second line, but only if it appears on the first line as well. If a paragraph has just one line, fill commands may take a prefix from that line.  The decision is complicated because there are three reasonable things to do in such a case: -  Use the first line's prefix on all the lines of the paragraph. -  Indent subsequent lines with whitespace, so that they line up under the text that follows the prefix on the first line, but don't actually copy the     prefix from the first line. -  Don't do anything special with the second and following lines. All three of these styles of formatting are commonly used.  So the fill commands try to determine what you would like, based on the prefix that appears and on the major mode.  Here is how. If the prefix found on the first line matches \`adaptive-fill-first-line-regexp', or if it appears to be a comment-starting sequence (this depends on the major mode), then the prefix found is used for filling the paragraph, provided it would not act as a paragraph starter on subsequent lines. Otherwise, the prefix found is converted to an equivalent number of spaces, and those spaces are used as the fill prefix for the rest of the lines, provided they would not act as a paragraph starter on subsequent lines. In Text mode, and other modes where only blank lines and page delimiters separate paragraphs, the prefix chosen by adaptive filling never acts as a paragraph starter, so it can always be used for filling. The variable \`adaptive-fill-regexp' determines what kinds of line beginnings can serve as a fill prefix: any characters at the start of the line that match this regular expression are used.  If you set the variable \`adaptive-fill-mode' to \`nil', the fill prefix is never chosen automatically. You can specify more complex ways of choosing a fill prefix automatically by setting the variable \`adaptive-fill-function' to a function.  This function is called with point after the left margin of a line, and it should return the appropriate fill prefix based on that line.  If it returns \`nil', \`adaptive-fill-regexp' gets a chance to find a prefix. ## CaseKeybindingsCommandsDescriptionM-ldowncase-wordConvert the following word to lower case. M-uupcase-wordConvert the following word to upper case. M-ccapitalize-wordCapitalize the following word. C-x C-ldowncase-regionConvert region to lowercase. C-x C-uupcase-regionConvert region to upper case. *Note:**1. When a negative argument, the case conversion applies to appropriate no. of words before point, but do not move the point, its convinent if I typed something in wrong case and want to correct the case. **2. In case the command to change case is given in the middle of the word, the case change would happen from the point to the end of the word. *## Text ModeThis is the major mode for editing the text language, any file ending with . txt will automatically enables this mode; and this mode can also be called by M-x text-mode. Blank lines and page delimiters separate paragraphs, and as a result paragraphs can be indented, and adaptive filling determines what indentation to use when filling a paragraph. The usually inserts whitespace up to the next tab stop, instead of indenting the current line. Text mode turns off comments features except when you explicitly invoke them. It changes so that the single quotes are considered part of the words. But if a word starts with a single quote it is treated as a prefix for the purpose of capitalization. Entering text-mode invokes text-mode-hook. ## Outline ModeThis is major mode derived from Text mode, which is specialized for editing outlines; it provides commands to navigate between entries in the outline structure. Type M-x outline-mode to switch to outline mode, entering this mode runs the hook text-mode-hook followed by outline-mode-hook. When in outline mode use command to make a line invisible it disappears the line and ellipsis(three periods in a row) is displayed at the end of the previous visible line. Editing command on lines, such as C-n and C-p treat the text of the invisible line as part of the previous visible line. outline-minor-mode toggle outline minor mode in the current buffer, it is a buffer-local minor mode which provides the same commands as the major mode for the current buffer, this provides special keybindings with C-c prefix, and C-c @ as the prefix in minor-mode. ### Outline FormatOutline mode assumes the the lines in the buffer are of two types: heading lines  and  body lines Heading line: start with one or more asterisk ('\*'); the number of asterisks determines the depth of the heading in the outline structure. Body Line: Any line which is not a heading line is a body line. Body line belong with a preceding heading line. A heading line and a body line collectively is called as an entry. ### Outline mode commandsKey bindingsCommandsDescriptionC-c C-noutline-next-visible-headingMove point to the next visible headingC-c C-poutline-previous-visible-headingMove point to the previous visible heading. C-c C-foutline-forward-same-levelMove point to the next visible heading line at the same level. C-c C-boutline-backward-same-levelMove point to previous heading line at the same level. C-c C-uoutline-up-headingMove point up to a lower-level. ### Outline visibility commandsKeybindingsCommandsDescriptionC-c C-chide-entryMake the current heading line's body invisibleC-c C-eshow-entryMake the current heading line's body visibleC-c C-dhide-subtreeMake everything under the heading invisible excluding the headingC-c C-sshow-subtreeMake everything under the current heading visibleC-c C-lhide-leavesMake the body of the current heading line, and all of its subheadingsC-c C-kshow-branchesMake all subheading of the current heading line, at all levels, visibleC-c C-ishow-childrenMake immediate subheadings of the current heading line visibleC-c C-thide-bodyMake all body lines in the buffer invisibleC-c C-ashow-allMake all line in the buffer visibleC-c C-qhide-sublevelsHide everything except the top N level of heading linesC-c C-ohide-otherHIde everything except the heading or the body that point is inAnd most of these commands may work differently in org-mode, the org-mode is an advance implementation of outline-mode. I will be writing about this mode in my later days. It may confuse me at a later stage as mainly I use org-mode for my purposes of note taking and writing this blog. Let me provide some brief introduction to the org-mode. ## Org ModeOrg mode, as in outline mode, each entry has a heading line that starts with one or more asterisk (\*); Any line beginning with a '#' is considered as a comment. and it also provides commands to view and manipulate the outline structure. The simplest of these commands is (org-cycle). If invoked on heading line, it cycles through different visiblity states of that subtree:1.  Showing only the heading line. 2.  Show only the heading lines and the heading lines of its direct children. 3.  Show the entire subtree. The (org-shifttab) in an org mode cycle visiblity of entire online subtree1.  Show only top-level heading lines. 2.  Show all heading lines but no body lines. 3.  Show everything. We can move the entire entry up and down in the buffer, including its body lines and subtree, by typing M- (org-metaup) or M- (org-metadown) on the heading line. Similarly, it can promote or demote the heading line with M- (org-metaleft) and M-&lt;right (org-metaright). For details, The Org Mode Manual. ### Org as an OrganizerYou can tag an Org entry as a  TODO  by typing **C-c C-t** (org-todo) anywhere in the entry. This adds *TODO* keyword and typing the keyword **C-c C-t** again switches the keyword to *DONE*; press **C-c C-t** again and it will remove the keyword entirely. They keywords can be customized using the variable 'org-todo-keywords'With the possiblity of marking an entry as TODO, we can also attach a date to it by typing **C-c C-s** (org-schedule), This prompts for a date by popping a calendar, and then adds the tag 'SCHEDULED', together with the selected date, beneath the heading line. **C-c C-d** (org-deadline) have the same effect except it adds the tag 'DEADLINE'. Once you have some planned TODO items, you can add that file to the list of  agenda fileS  by typing **C-c [** (org-agenda-file-to-front). It allows us to maintain multiple agenda files. The list of these agenda files are stored in the variable 'org-agenda-files'. Typing M-x org-agenda lets view items coming from agenda file, this command prompts for what we want to see: a list of things to do this week, a list of TODO items with specific keywords. ### Org as an authoring systemTo format org notes nicely and to prepare them for export and publication, **C-c C-e** (org-export) to export buffer and prompts for a export format; includes HTML, LaTeX, OpenDocument(. odt), and PDF. To export several files at once to a specified directory, either locally or over the network, we can define a list of projects through the variable 'org-publish-project-alist' Org supports a simple markup scheme for applying text formatting to exported documents:-  This text is *emphasized*-  This text is **in bold**-  This text is underlined-  This text uses `a teletype font`&gt; \`\`This is a quote. ''  This is an example. ## TeX ModeEmacs provides special major modes for editing files written in TeX and its related formats. TeX is a powerful text formatter written by Donald Knuth; like GNU Emacs. Latex is a simplified input format for TeX implemented using TeX macros. DocTeX is a special file format in which the LateX sources are written, combining sources with documentation. TeX mode has four variants:1.  Plain TeX mode2.  LateX mode. 3.  DocTeX mode. 4.  SliTeX mode. These distinc major modes differ only slightly, and are designed for editing the four different format. Emacs selects the appropriate mode by looking at the contents of the buffer. Emacs chooses the mode specified by the variable 'tex-default-mode'; its default value is latex-mode. If Emacs doesn't get it right you can select the correct variant of TeX using the command 'M-x plain-tex-mode', 'M-x latex-mode', 'M-x slitex-mode', or 'M-x doctex-mode'. ## SGML and HTML ModesHTML mode is slightly customizable variant of SGML mode. KeybindingsCommandDescriptionC-C C-nsgml-name-charInteractively specify a special character and insert the SGML '&amp;' command for that characterC-c C-tsgml-tagSpecify a tag and its attribute. C-c C-asgml-attributesinsert attribute value for the current tagC-c C-fsgml-skip-tag-forwardskip across a balanced tag group. C-c C-bsgml-skip-tag-backwardskip backward across a balanced tag group. C-c C-dsgml-delete-tagDelete the tagC-c ? TAG &lt;/td&gt;sgml-tag-helpdisplay the description and the meaning of the tag&lt;/tr&gt;C-c /sgml-close-taginsert a close tag for the innermost undetermind tagC-c 8sgml-name-8bit-modeToggle a minor mode in which Latin-1 characters insert the corresponding SGML commands. C-c C-vsgml-validaterun a shell commands to validate the current buffer as SGML. C-c &lt;/td&gt;sgml-tags-invisibleToggle the visiblity of existing tags in the buffer. &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;There is a major mode for editing XML documents called as nXML mode. This is a mode which can recognize any XML schema and use them to provide completion on XML elements via 'M-, as well as on the fly XML validation with error highlighting. To enable nXML mode for existing buffer type **M-x nxml-mode** or **M-x xml-mode**For files with extension . xml nxml-mode is used by default; and for files with xhtml html-mode is used. ## Nroff modeThis is a major mode derived from Text mode and is specialized for editing nroff files e. g. UNIX man pages. **M-x nroff-mode** enters into this mode, and runs the hook 'text-mode-hook', then 'nroff-mode-hook'; nroff command lines are treated as paragraph separators, pages are separated by '. bp' commands, and comments start with backslash-doublequote (\\ )KeybindingsCommandsDescriptionM-nforward-next-linemove to the beginning of next line, which is not a nroff commandM-pbackward-next-linesame but moves upM-?count-text-linesdisplay in the echo area the number of text lines. **M-x electric-nroff-mode** toggles the Electric Nroff mode and is a minor-mode and can be used with Nroff mode. ## Enriched TextThis is a minor mode for editing formatted text files in a WYSIWYG ( what you see is what you get ) fashion. When Enriched mode is enabled we can apply various formatting properties to the text in the buffer. This mode is typically used by Text mode and is not compatible with Font Lock Mode which is used by many major modes, for syntax highlighting. When you save a buffer with enriched mode enabled, it is saved using the 'text/enriched' format, including the formatting indentation. To create a new file of formatted text, visit file and type **M-x enriched-mode** ## Editing Text Based TablesThe table package provides commands to easily edit the text-based tables. A  table  consist of t a rectangular text area which is divided into  cells . Each cell must be one character wide and one character high, not counting its border lines. A cell can be subdivided into more cells, but they cannot overlap. CommandsDefaultDescriptiontable-cell-vertical-charPipeThe character used for vertical lines. table-cell-horizontal-chars- =character used for horizontal lines. table-cell-intersection-char+character used for intersection of horizontal and vertical linesThe following are examples of invalid tables:      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   --+&nbsp;&nbsp;   &nbsp;&nbsp;|&nbsp;&nbsp;   &nbsp;&nbsp;|&nbsp;&nbsp;   a     b     cFrom left to right:1.  Overlapped cells or non-rectangular cells are not allowed. 2.  The border must be rectangular. 3.  Cells must have a minimum width/height of one character. ## Two column editingTwo columns lets you convinently edit two side-by-side columns of text. It uses two side-by-side windows, each showing its own buffer. There are three ways to enter two column mode:1.  2 or C-x 6 2 - Enter two columns mode with the current buffer on the left and on the right, a buffer whose name is based on the current buffer's name. 2.  s or C-x 6 s - Split the current buffer, which contains two column text, into two buffers and display them side by side. 3.  b BUFFER or C-x 6 b BUFFER - Enter two columns mode using the current buffer as the left-hand buffer, and using buffer BUFFER as the right-hand buffer. "},{"id":38,"url":"https://www.omps.in/day-6-help-and-run-command-by-their-name/","title":"Day 6 - Help and Run command by their name","body":"2015/12/13 - Sixth day of writing my content, I had never thought i would be even writing for this many posts continuously(I am kind of a lazy writer) and I realize this experience of writing blogs and sharing my learnings or acquired knowledge is actually encouraging. I started to think that if I am able to put some extra time and effort, I may also complete a lot of things by taking similar challenegs. My priority ones are loosing weight(I am still finding myself in tough situation on to get myself motivated) and learning the python programming language, which as I had been told is pretty easy to learning. I may get inconsistent at times due to other priorities coming up, but writing my learnings and posting everyday keeps me motivated and keep reminiding me I have pending stuff to do. Every emacs command has a name which can be used against the convenient key bindings. Most emacs commands doesn’t have key bindings so the only way to learn them is to use them as commands, by emacs convention all the command will consist one or more words separated by ‘-‘. For eg. auto-fill-mode or manual-entry. So to enter a command, type M-x enter the command name RET (to execute), C-g (to cancel). Its something similar to what we discussed in our Day 5, to enter the mini-buffer run the command and execute it and it does work similar for completion as it is to be done in mini-buffer. well there are many things which we need immediately and overlook to take the effort to read the manual, or say for LISP errors which we might not be aware of, the freenode. org IRC network’s #emacs channel is the best place after failed attempt of finding any help on google and emacswiki. org. but again at the same time emacs itself has a very awesome online documentation for reference. Online means it is accessible within emacs all the time. The help commands are easily accessible with ‘C-h’ help character, after this we usually put the character for which we are seeking help and can be canceled the same way as all the mini-buffers. ‘C-h’ itself a help option, so typing ‘C-h C-h’ will print the available help characters. Apart from C-h, F1 can also be used. I have put some simple stuff about how to ask help in Emacs at «a id=”put-the-link-here” name=”put-the-link-here”&gt;&lt;/a&gt;. A more detailed list s below. Similarly apropos are the commands which may answer certain questions as “what are the commands for working with files?”. specifying a apropos pattern such as a word, a list of words, or regular expressions, each apropos command display a list of item that matches the pattern in a separate window. CommandsDescriptionC-h a *TOPICS*Searched for the command whose name matches the argumentsC-h i d m *emacs* RET i *TOPIC* RETThis searches for the topic in the indices of online emacs manual, and prints the first match&#xa0;',' to jump to the subsequent matches, we can also use regexes here. C-h i d m *emacs* RET s *TOPIC* RETSame as above, but instead of just searching the indices, it searches the manual too. C-h C-fDisplays the FAQ. C-h pDisplay all the emacs package based on the keywords. C-h bDisplay all active key bindingsC-h c *key*show the name of the command it runs. (describe-key-briefly)C-h d *TOPICS* RETDisplay command and variables whose documentation matches topic. (aprops-documentation)C-h eDisplay **Message** BufferC-h f *function* RETDisplay documentation on the LISP function (describe-function)C-h hDisplay the 'HELLO' fileC-h iRun info, the GNU documentation browser, the complete emacs document is available online in infoC-h keyDisplay the name and the documentation of the command that the key runs. (describe-key)C-h lDescription of last 300 keystrokes. (view-lossage)C-h fDisplay docuemntation of the current major mode. (describe-mode)C-h nDisplay news of recent changes. (view-emacs-news)C-h pfind packages by topic keyword. ((finder-by-keyword)C-h rDisplay the emacs manual. (info-emacs-manual)C-h sDisplay the current contents of the syntax table, with explanation of what they mean&#xa0;(describe-syntax)C-h tenter the emacs interactive tutorial. (help-with-tutorial)C-h v *var* RETDisplay the doc for the LISP variable var. (describe-variable). C-h w *command* RETShow which keys run the command named command. (where-is)C-h C *coding* RETDescribe the coding system. (describe-coding-system)C-h C RETDescribe the coding system current in use. C-h F *COMMAND* RETEnter Info and go to node that documents emacs command *command*. (info-goto-emacs-command-node)C-h I *method* RETDescribe the input *method*. (describe-input-method)C-h K *key*go to the key-sequence document in Info. (Infp-goto-emacs-key-command-node)C-h L *Language-env* RETDisplay info on the character set, coding system and input methods. (describe-language-environment)C-h S *Symbol* RETDisplay the info on the symbol *symbol* based on the programming mode you are using (info-lookup-symbol)C-h . Display message for the special text area. (display-local-help)**Apropos**&#xa0;C-h a *pattern* RETSearch for command whose names matches the pattern. M-x apropos RET *pattern* RETSearch for functions(both interactive and non-interactive) and variables whose name matches the *pattern*M-x apropos-variable RET *pattern* RETSearch for a user-option variables matching the *pattern*. M-x apropos-value RET *pattern* RETsearch for function whose definition match *pattern* and variable whose value matches *pattern*C-h d *pattern* RETsearch for function and variable whose documentation string matches *pattern***Emacs help files**&#xa0;C-h C-cDescribe the emacs copying condition. rules for copying and redistributing emacs. (describe-copying)C-h C-dDebugging in emacs. (view-emacs-debugging)C-h gDisplay general information about GNU Project. (describe-gnu-project)C-h C-mHow to order printed copies. (view-order-manual)C-h C-nTo see the emacs news and listing of new features. (view-emacs-news)C-h C-oHow to get new version. (describe-distribution)C-h C-pTells us about the known emacs problems. (view-emacs-problems)C-h C-tDisplay the emacs TODO list, or things that needs to be done. (view-emacs-todo)C-h C-wDescribe warranty. (describe-no-warranty)**Commands work in Help mode**&#xa0;SPCScroll forwardDELScroll backardTABMove point forward to next cross refrenceS-TABMove point backward to previous referenceRETFollow a cross refrence point. C-c C-cShow all documents of symbol at the point. I just completed through the help documentation in emacs manual, and I am convinced the emacs has got the most extensive documentation an editor could ever have, the above table tries to cover as many things as possible but I am pretty sure, I would have definitely missed things, like this that once on IRC I had been suggested some lisp code to quickly take me to the help page and I missed it. Well, on many modern keyboards F1 as well works to call the help function. While doing the typing I do make a lot of mistakes and undo is the most fundamental command for correcting the mistakes. C-/ does the same trick as C-x u and C-_ all meant to undo my work. If you see the buffers have been modified accidentaly, the easiest way is to press C-/ repetadely unless the stars disappears from the mod line. Just press C-/ to see the last change, so that we can understand if the change was intentional, if yes then we can leave it like this, if no then we can undo by pressing C-/ repeatedly. Its much easier to transpose characters in emacs using *C-t*(transpose-chars) and transpose words using *M-t*(transpose-words) and moves the word containing or preceding point forward as tell, though it does not move any punctutation mark, for eg, FOO, BAR will become BAR, FOO. *C-M-t*(transpose-sexps) is similar to transposing two expressions and *C-x C-t*(transpose-lines) for transposing lines. The numeric command works here, it tell the transpose command to move forward the character before or containing point across several other characters. M– M-l Convert last word to lower-case, it is Meta-Minus. M– M-u Convert last word to uppercase. M– M-c convert last word to lowercase with capital letters. The spell checking ability of any editor should be good for the writer to help check spells on the fly, and emacs does have some nifty commands to do that as well. We need aspell, ispell, hunspell installed on the system for these commands to work. Once started the programs continue to run so that subsequent spell check commands complete more quickly and can be killed using M-x ispell-kill-ispell but is not required as it does not uses much memory and only active when spelling correcting is done, these programs using two dictionaries one is the standard dictionary and the other is our defined dictionary. The local dictionary can be defined by “ispell-local-dictionary* or if nil by “ispell-dictionary” or if both is nil then the default dictinary is selected. The variable “ispell-complete-word-dict” specifies the file name for its dictionary and is used for word completion. Flyspell mode is fully automatic mode of checking the words in the buffer as we insert them or edit them, when it finds the words it doesn’t recognize it highlights that word. Right now I am seeing my buffer so colorful, thanks to flyspell mode, and my typing :). M-x flyspell-mode toggles the flyspell mode, to turn on flyspell mode for all text buffer turn-on-flyspell-mode to text-mode-hook. Key bindingcommandDescriptionM-$ispell-wordcheck and correct spelling of active region or word at point. M-x ipsell&#xa0;check or correct spelling in active region or entire buffer. M-x ispell-buffer&#xa0;check and correct spelling in the buffer. M-x ispell-region&#xa0;check and correct spelling in the region. M-x ispell-message&#xa0;check and correct spelling in the draft message, excluding citied contentM-x ispell-change-dictionary RET *Dictionary* RET&#xa0;restart ispell/aspell/hunspell using dict as dictionary. M-x ispell-kill-ispell&#xa0;kill the dictionary processM-TAB / ESC-TABispell-complete-wordcomplete the word based on the dictinaryM-x flyspell-mode&#xa0;enable flyspell mode which highlights misspelled wordsM-x flyspell-prog-mode&#xa0;enable flyspell mode for comments and strings onlyWhen the commands encounter the errors in case of misspelled words, it usually display the numbered “near-misses” close to the incorrect word, then we have to choose the valid response from the below list. digitreplace the word, just this time, with one of the near misses, the near misses are displayed by no. and the no. can be used to select it. SPCskip this word, continue to consider incorrect and don't change. r *NEW* RETreplace the word just this time, with the new word. R *NEW* RETreplace the word and do query-replace so it can be replaced everywhere. aaccept the incorrect word, treat it as correct one, but only in this editing sessionAsame as above but include the buffer too. iinsert this word in my private dictionary, so it can be treated as a correct word by my spell check applicationsmlike iusave the lowercase version of this word to my private dictionaryl *word* RETLook in the dictinary for the word that match *word*. these words become new list for near-misses. C-g Xquit interactive spell checkingC-g xquit interactive spell checking and move point back to where it was when you started spell checking. C-g qquit spell checking and kill the sub process as well. ?show the list of options. Well. I am done for the Day 6, being emacs is such a vast entity as an editor, i spend most of my time going through the help document and manual pages only and enable myself to write quality content, which should help me or any one else who might want to use my content for his/her reference. I am still at a very primitive level of doing things with emacs, but I am aware I am still to young here. I will put these text on git hub as well, for anyone to help me correcting the content or if adding anything more. "},{"id":39,"url":"https://www.omps.in/day-5-minibuffer/","title":"Day 5 - Minibuffer","body":"2015/12/03 - Emacs have a minibuffer, and called the same because of its small screen space, the minibuffer resides in the same area as echo area so many time when any error or informative message appear in the echo area, it just hides the minibuffer for a few seconds or till the time any new keypress is made.  Minibuffer can be activated using typing text to it, and exited by typing **** (execute the command) or **C-g** (cancel the command). The minibuffer prompt shows the default arguments suppose the commands that read buffer names usually show buffer name as the default and can be activated using **** When finding a file in emacs, for opening or creating one, the minibuffer usually open the default dir, the default directory is stored in buffer-local variable as ‘default-directory’, now whenever emacs will read a filename using a minibuffer it will insert the directory name of the file being opened. Emacs interpret ‘~/’ as your home directory. you can specify something like this in case you do not want to type the complete path from where you want your files to be opened / created. The minibuffer in emacs is also a buffer and the usual emacs commands are available for editing. **** in the minibuffer submits the argument and the same cannot be used to insert a new line and can be done with **C-q C-j** and **C-o**. The keys , , and ? are bound to completion of the commands. When the minibuffer is active, the echo area is treated like an ordinary Emacs window. Minibuffer uses a feature called as completion these(, and ) commands attempt to complete the text in the minibuffer, '?' usually provide a list of possible completions. These commands work by narrowing down a large list of to a smaller subsets of matches. Emacs perform completion using one or more of the below *Completion Styles*. The variable completion styles specify the completion style to use. From the Emacs Manual: basicA matching completion alternative must have the same beginning as&#xa0;the text in the minibuffer before point.  Furthermore, if there is&#xa0;any text in the minibuffer after point, the rest of the completion&#xa0;alternative must contain that text as a substring. &#xa0;&#xa0;partial-completionsThis aggressive completion style divides the minibuffer text into&#xa0;words separated by hyphens or spaces, and completes each word&#xa0;separately. a \* in the minibuffer is treated as a wildcard and matches&#xa0;any character at the corresponding position. &#xa0;&#xa0;emacs22this is similar to basic, except it ignores the text in minibuffer after the&#xa0;point. Below additional completions are also defined, and can be used in completion-styles substringA completion alternative must contain the text in the minibuffer before point. , and&#xa0;text after point, as substrings. &#xa0;&#xa0;initialsthe very agressive completions style attempts to complete acronyms and initalisms&#xa0;&#xa0;emacs21a very simple completion style, if the text in minibuffer is foobar, only matches&#xa0;starting with foobar is considered. M-x uses the minibuffer to read the name of a command, so completion works by matching the minibuffer text with available emacs commands. THe commands for completion works as defined in the minibuffer when the completion is allowed. ****   complete as much as possible; if unable to complete display a list of possible completions (minibuffer-complete) ****   Completes up to one word. (minibuffer-complete-word) ****   Submit the minibuffer text as argument. (minibuffer-complete-and-exit) ?     Display list of completions. (minibuffer-complete-help) Mouse-1  Clicking mouse button 1 or 2 on a completion alternative chooses itMouse-2  (mouse-choose-completion). M-v    Selects the window showing the completion list. (switch-to-completion)**** and then we can use the below pageup and prior commands. **** ****  (next-completion) this moves to point following alternatives. ****  (previous-completion) this moves to previous alternatives. There are many modes in emacs which let you do so many things with the minibuffer, some noted ones are ido-mode and helm-mode. Ido mode is part of the emacs from version 22. I will cover these modes in my later learnings, and keep updating. "},{"id":40,"url":"https://www.omps.in/day-4-editing/","title":"Day 4 - Editing","body":"2015/11/28 - I am becoming such an inconsistent learner and writer and have been not being able to post any new learnings a from last 4 days for emacs, but sometimes the work just take over us and do not allow any bandwidth, this really could be a lame excuse, but my sincerely I should be keeping my posts regular. Again, it’s more the like learning from your (in this case my) mistakes and going through your work again and again it’s a way of reorganising your work and fixing it wherever necessary, I would also need help to understanding the mistakes we should avoid overlooking while technical writing or a posting on a blog. What new there could be there inserting text, believe me, emacs is pandora box for writers and enthusiasts. : There is so much written in the #emacs manual C-h r, and this time it was the keys C-q or C-x 8 this is used to print literals or Unicode characters by specifying their Hex or octal code. For eg, we have a key on keyboard as ‘Del’ which is used to delete the character on the point and move backward(from right to left, when the text displays from left to right or otherwise in case text being displayed the other way). The C-q combination when pressed will make the delete key type type the literal ‘DEL’ instead of acting as text eraser, and the same goes for RET, when you press RET(RETURN or ENTER on some keyboard) we get RET as the literal. But really I want to insert a blank line could it be C-\n (new line character), well that is going to be a cryptic I am sure emacs doesn’t treat it’s commands this way and I can simply press C-o and similarly C-x C-o delete all but the last blank line, good gracious I was too fed up with doing C-k to delete my empty lines :) and similarly C-j is for entering a new line. I want to count the no of words in my selected region or in the buffer, M-= and C-u M-= comes to the rescue. The latter would count the no. of words in the buffer. The command C-x = would do the display the information for my cursor position. Quoting from the emacs manual. We can also move around the buffer with providing the numeric argument, the most simpler is to use the ‘Meta’ command with the no. The keys M-1, M-2 as well as M– are bound to commands (digit-argument and negative-argument) and set up argument for the next command. For example I want to go down by 5 lines M-5 C-n I was just wondering now what if I want to write 5 o’s in line, well thats another question to worry why I would like to do, but how to do in Emacs, and well M-5 0 C-n is not going to do this(i. e. insert 5 0 and go to next line). So, to achieve this press M-5 C-u 0 does the trick. We now know there is another way of inserting a Numeric Argument and that is using C-u, but when type alone it does have its own special meaning of 4 characters. ‘C-u C-u C-f’ will move you 16 characters, ‘C-u C-u C-o’ will make a lot of blank lines, and C-u C-k will kill 4 lines. :) It would be good to know that emacs is powerful to repeat commands as well, the way it worked in Shell, but I think its pretty ahead of its time, and in one command itself you can ensure you can repeat the command as many times as you want. The trick is to use C-x z, if I have used a command ‘C-u 2 0 C-d’ to delete 20 characters, we can repeat this same command using ‘C-x z’ and insert ‘z’ as many times you want to run the previous command. cool. For deleting 100 chars I may need to write like ‘C-x z z z z z’ should remove 100 characters. Note: this command will not change the arguments in the previous command So we checked out the below in commands today. CommandsDescriptionC-h remacs manualC-qinsert literalsC-x 8same as aboveC-oinsert blank lineC-jinsert new lineC-x C-oKill all but the last blank lineM-=Count the no. of lines and characters and wordsin bufferC-u M-=same as above except no. of wordsC-x =cursor postion. M--Bound to digit argumenst such as M-1, M-2C-x zRepeat the previous command. no. of z will repeat the no. of times"},{"id":41,"url":"https://www.omps.in/day3-understanding-files-and-buffers/","title":"Day 3 - Understanding Files and Buffers","body":"2015/11/23 - The windows and the buffer. I will touch upon one new topic and what I learned today. While writing my Day 2 article I learnt intersting usage of windows and frames (well, the one where we do our editing and writing stuff. It would be good to understand how opening emacs creates the frame and window within. ) We start emacs the same way we start our other application. (on Linux, by typing on the terminal window; on Windows and Mac, clicking on to the application icon. ) When emacs starts up it usually display a special buffer name GNU Emacs. This contains information about emacs and links to common good stuff for begineers(in later days we will figure out how we can skip this) It is good not to start multiple emacs session, instead just start once and do all the editing in the same sessions. In this way the emacs context accumlates valuable context, such as kill ring, registers, undo history, which helps a lot at advanced stages. Buffer: The text we are going to edit in emacs is called as buffers and is used to hold the files text. So everytime we visit a file, run dired, send message with ‘C-x m’ or ask for help, a buffer is used for holding the text of the message. Creating and selecting buffers: Command KeybindingCommandDescriptionC-x b BUFFERswitch-to-bufferselect of create a buffer&#xa0;&#xa0;named BUFFER. C-x 4 b BUFFERswitch-to-buffer-other-windowslect BUFFER in other&#xa0;&#xa0;window. C-x 5 b BUFFERswitch-to-buffer-other-frameselect BUFFER in other&#xa0;&#xa0;frame. C-x &lt;/td&gt;previous-bufferselect the previous buffer&lt;/tr&gt;C-x &lt;/td&gt;next-bufferselect the next buffer&lt;/tr&gt;&lt;/tbody&gt;C-u M-g M-g&#xa0;read num N and move to line NC-u M-g g&#xa0;in the most recent buffer&#xa0;&#xa0;other than current&lt;/table&gt;### Listing BuffersCommand KeybindingCommandDescriptionC-x C-blist-bufferList the exisitng buffersHere is an example of a buffer list:CRM Buffer        Size Mode       File. \* . emacs        3294 Emacs-Lisp    ~/. emacs % **Help**         101 Help  search. c       86055 C         ~/cvs/emacs/src/search. c % src         20959 Dired by name   ~/cvs/emacs/src/-  **mail**         42 Mail% HELLO         1607 Fundamental    ~/cvs/emacs/etc/HELLO% NEWS        481184 Outline      ~/cvs/emacs/etc/NEWS  **scratch**       191 Lisp Interaction-  **Messages**      1554 Fundamental\`. ' in the first field indicates that this is the current buffer.  \`%' indicates a read-only buffer.  \`\*' indicates that the buffer is  modified . The buffer \`\*Help\*' was made by a help request (\*note Help::); it is not visiting any file. The buffer \`src' was made by Dired on the directory \`~/cvs/emacs/src/'. ### KillingThe buffers can simply be done by just pressing C-x k BUFFER or in the C-x C-b we can select the buffer by pressing k and then exectue it. ## WindowsKey BindingsDescription'C-x 2'To split the windows into 2 one above the another. 'C-x 3'Split the windows side by side. 'C-x o'to move around windows, or click in the window with the mouse click to have the focus on that window. 'C-M-v'Scroll the next window. 'C-x 0'Delete the selected window'C-x 1'Delete all windows except the select one. 'C-x 4 0'Delete the selected window and kill the buffer showing in that window. 'C-x ^'Make selected window taller. 'C-x }'Make selected window wider'C-x {'Make selected window narrower'C-x -'Shrink window if buffer dont need so many lines. 'C-x +'Make all window same height. "},{"id":42,"url":"https://www.omps.in/day-2-the-real-estate/","title":"Day 2 - The Emacs Real estate","body":"2015/11/14 - The Emacs Real estate. : This is about the screen organization of emacs, how the text is placed and how the screen is drawn for the editor, this is about telling you how the things in #emacs as they are, and why they are important this way. Though, i should have started understanding it and writng it down on Day 1, but understanding the key contol is equally important to me, if I did not had learned about it, I surely would have faced difficulty closing my emacs and moving around. Now let me just try to see how much I am understanding about the screen here and how well I can put it in my words. :) ofcourse it is not a tech doc, but this my 30 Days challenege to learn more about emacs and understand emacs for good. I would be mainly using a lot of images compared to lot of writing that, understanding the screen can better be understood by rightly poining to the correct area. The ScreenDouble clicking on the emacs icon does open up a GUI window and similarly typing it on command prompt from withing an X Windows system, I get the emacs as an editor with full flesh and bones, i actually means as an GUI application, like we see for other editors. And when I do same while I am on the command prompt with no X support, or with -nw or -t (with emacsclient, will write more about this in coming days. ) i get the emacs taking up my entire terminal screen. We will call these frames and emace behaves almost similar in both these frames. It normally starts with just one frame, but many frames can be created. Each frame consist of several distinct regions. as shown in the picture below. The emacs frame consist of these important segments Point: Where editing takes placeThe place where the cusrsor is present is called as the point in a multiple windows emacs in GUI, the point can be moved by clicking the mouse in the respective region, the active window will have the curson as solid block and will appear to be on the cursor. While working with several buffers each buffer has its own valur for point. Echo area: Where the commands and messages appear at bottom of the frame. if you pause for more than a second in the middle of the command, you can see your commands being echoed in the echo area. it also shows you the error message when the command fails. The messages displayed in the echo area are generally saved in the special buffer calles as Messages Mode Line: Understanding the mode line. At the bottom of every window there is a mode line. The text displayed on the mode line has the following formatcs:ch-fr buf    pos line (major minor) o cs display the character set. '-'implicate no special character set.  see [Coding System](http://www. gnu. org/software/emacs/manual/html_mono/emacs. html#Coding-Systems)'='means no coversion, and used for files with no textual data'1'ISO Latin-1, other characters represent various coding systemo ch  this usually show 2 dashes (&#x2013;)if the buffer is unmodified. (\*\*)if the buffer is modified. '%\*'for read only buffer if modified. '%%'otherwise, i. e read only buffer and not modified. '-'displayed after ch, if the directory is local. '@'if the directory if buffer is on remote macine is shows @. o fr  is the selected frame name, default is F1 o buf  usually the name of the file or the buffer. o pos  where there is additional text above the top of the window or below the bottom. AllIn case of small buffer and everything visible on screenTopIf you are at the beginning of the bufferBotIf you are at the bottom of the buffernn%nn is the percentage of buffer above the windowo line  ‘L’ Followed by the line no. at point. o major  Name of the major mode used in buffer, for eg. Text mode, Lisp Mode, Org Mode and so on. o minor  minor mode are the list of enabled minor modes on top of major mode, for eg visual-line-mode, flyspell-mode The Menu Bar - How to use. On the graphical display you can just use the mouse to open the menu bar, an arrow to the right of the menu denotes the menu having a sub menu. Many commands in menu bar have ordinary key bindings as well. On a text terminal menu bar can be opened using ‘M-`’ or , or run the command tmm-menubar. Move around the menu bar using up and down arrow key, i. e enter key, to select the item or C-g to come out of the menu bar mode. I know its been a little late today, but I was quite able to give time one weekends than as on weekdays, I just don’t want to loose focus so am trying to keep up with my posts daily, hope these should be helpful, and I am seriously looking forward for your comments and suggestion, so do please keep posting, tomorrow I think I will go more about buffers and frames. All in all I am enjoying and learning so many things while posting and writing. "},{"id":43,"url":"https://www.omps.in/day-1-learning-emacs/","title":"Day 1 - Learn Emacs in 30 days challenge","body":"2015/11/13 - Thank you for your support and encouragement. So here I am writing about my beginning of Day 1: part and working with EMACS. The below is the content I am planning to touch upon during my 30 Days challenge. The checklist is not in any particular order, but just to remind me of the topics what I need to cover.  Modes.  IDO Mode org-mode     Todo items   Hyperlinks   tags, tables   propertis and columns   Date and time.    AGenda views   Exporting    tramp Running command by the name/ help/ commands for fixing typos. - Day 6 Commands for human languages.  Mark and the region / Killing and moving text / Registers Contrlling the display / Multiple buffers / Multiple windows / frames and graphical display Search and replacement.  File handelling.  Editing compling, testing and mantaining programs.  Sending mail, reading mail with rmail.  Dired mode.  The calendar and the diary.  Miscellaneous commands Customization. Quoting from Emacs Manual“ Emacs is the extensible, customizable, self-documenting real-time display editor. ” Emacs is an advanced editor because of its ability to perform complex operations related to OS, by controlling subprocesses, indenting programs automatically, showing multiple files at once and ofcourse we can use it as text editor. It is also a self-documenting means any time special command for help can be used for finding out what the particular command does. Emacs can be eaisly altered to behave in certain prefrence and is highly customizable. Emacs can go beyond simple customisation and can create entirely new commands. These new commands are simple program written in LISP. Downloading:  Downloaded Emacs: I downloaded for MAC OS X from http://emacsformacosx. com/. I had been suggested by many sites and also from the people on IRC #emacs channel, while you are learning to use emacs, do not start with a customised emacs. I believe it could be mainly because a lot of customisations are already done for you, hence limiting you learning curve. Well, downloading and installing with OS X is pretty simple and straight, I got “Emacs Version 24. 3 Universal Binary Released 2013-03-11”. Double click on the installer and voilla the installation is completed on the fly. For windows and Linux you can download GNU Emacs releases from a nearby GNU mirror; or if automatic redirection does not work see the list of GNU mirrors, or use the main GNU ftp server. GNU Emacs development is hosted on savannah. gnu. org. Working with emacs:  Starting the editor: once downloaded and installed. From the Launchpad -&gt; emacs, clicking on which took me to the editor in its full glory, with a nice welcome message with link to the manual and the beginner emacs tutorials to get a start working with emacs and to quickly get help in emacs “C-h (Hold down Ctrl and Press h)Few things to note and which is global to emacs. Control Key in emacs is denoted as ‘C’. All or Esc Key in emacs is denoted as ‘M’ or referred in document as meta key. Shift will be denoted as ‘S’. Moving aroundMost movements in emacs can be controlled using the arrow keys but some still say it is not advisable and use of key sequences controled by Ctrl and Meta keys are advisable. below table helps in understanding the movements with these keys. KeysMovementC-vView next screen also as Page Up. M-vMove Backward one screen or Page Down. C-lredisplay the text with cursor at the center of the screen. C-pPrevious line or up arrow key. C-bback one character or left arrow key. C-fforward one character or right arrow key. C-nNext line or down arrow key. M-fMove one forward one word. M-bMove back one word. C-aMove to the beginning of the line. C-eMove to the end of the line. M-aMove to the beginning of the sentence. M-eMove to the end of the sentence. C-uto specify a repeat count. &#xa0;C-v and M-v are exceptions as they won't move pages but&#xa0;instead will scroll to that many lines forward/backwardC-gKill the running command in minibffer, or in case emacs&#xa0;stop responding. C-dDelete the next character after the cursor cursor. DELdelete the character just before the cursor. Inserttext insertion is as simple as typing it. textyou can use the C-u to insert text as well. for eg. &#xa0;C-u 10 - will insert -&#x2014;&#x2014;&#x2014;. M-&lt;/td&gt;Kill the word before the cursor. &lt;/tr&gt;M-dKill the word after the cursorC-kKill from the cursor position to end of line. M-kKill to the end of current sentence. C-&lt;/td&gt;Set the mark, move aroung with the above keys to highlight&lt;/tr&gt;&#xa0;the text. C-yYank the file back. C-x C-fFind file, can be used for creating a file or opening an&#xa0;exitisitng file. C-x C-sSave the file, when you made some changes to the file and&#xa0;want to write the same to disk or save it. C-x sSave some buffers. C-x C-bList all the opened Buffers. C-x bSwitch buffer around. C-x C-cQuit Emacs. &lt;/tbody&gt;&lt;/table&gt;These are some of the common keys for moving around while in emacs. It seems its really hard for getting used to it, but as I am working with emacs for sometime, I started to feel it is most obvious to be like that. I think most of the time as a beginner we could get along with using the arrow keys and we should highly discourage it and use the emacs specific keybindings to move around within emacs. Apart from bringing the emacs on and starting it up, the very important thing we should remeber is how to close it. During my initial days as emacs user I was not aware of quitting emacs, and have of the time ended in killing emacs from the process tree, now I feel so stupid. C-g and C-x C-c are the commands, which can help you all the time, while we are learning. I have heard more advanced user of emacs seldom close their emacs sessions and I may try to forget using C-x C-C again. It may take some time till I get there and stop closing my emacs and I am sure it would be more than 30 days. "}];var idx=lunr(function(){this.ref('id')
this.field('title')
this.field('body')
documents.forEach(function(doc){this.add(doc)},this)});function lunr_search(term){document.getElementById('lunrsearchresults').innerHTML='<ul></ul>';if(term){document.getElementById('lunrsearchresults').innerHTML="<p>Search results for '"+term+"'</p>"+document.getElementById('lunrsearchresults').innerHTML;var results=idx.search(term);if(results.length>0){for(var i=0;i<results.length;i++){var ref=results[i]['ref'];var url=documents[ref]['url'];var title=documents[ref]['title'];var body=documents[ref]['body'].substring(0,160)+'...';document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML=document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML+"<li class='lunrsearchresult'><a href='"+url+"'><span class='title'>"+title+"</span><br /><span class='body'>"+body+"</span><br /><span class='url'>"+url+"</span></a></li>";}}else{document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML="<li class='lunrsearchresult'>No results found...</li>";}}
return false;}
function lunr_search(term){$('#lunrsearchresults').show(400);$("body").addClass("modal-open");document.getElementById('lunrsearchresults').innerHTML='<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow-lg" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';if(term){document.getElementById('modtit').innerHTML="<h5 class='modal-title'>Search results for '"+term+"'</h5>"+document.getElementById('modtit').innerHTML;var results=idx.search(term);if(results.length>0){for(var i=0;i<results.length;i++){var ref=results[i]['ref'];var url=documents[ref]['url'];var title=documents[ref]['title'];var body=documents[ref]['body'].substring(0,160)+'...';document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML=document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML+"<li class='lunrsearchresult'><a href='"+url+"'><span class='title'>"+title+"</span><br /><small><span class='body'>"+body+"</span><br /><span class='url'>"+url+"</span></small></a></li>";}}else{document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML="<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";}}
return false;}
$(function(){$("#lunrsearchresults").on('click','#btnx',function(){$('#lunrsearchresults').hide(5);$("body").removeClass("modal-open");});});